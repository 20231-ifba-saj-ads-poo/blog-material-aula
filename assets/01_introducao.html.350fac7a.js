import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as u,a,b as n,d as s,w as t,e as o,r as p}from"./app.1d3655e9.js";const d={},m=o('<h1 id="linguagens-e-paradigmas-de-programacao" tabindex="-1"><a class="header-anchor" href="#linguagens-e-paradigmas-de-programacao" aria-hidden="true">#</a> Linguagens e paradigmas de programa\xE7\xE3o</h1><p>As informa\xE7\xF5es desse cap\xEDtulo foram retiradas basicamente de <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> e <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>.</p><h2 id="introducao" tabindex="-1"><a class="header-anchor" href="#introducao" aria-hidden="true">#</a> Introdu\xE7\xE3o</h2><p>No passado escrevia-se programas utilizando apenas linguagens de baixo n\xEDvel. A escrita \xE9 engessada, complexa e muito espec\xEDfica, sendo pouco acess\xEDvel para os desenvolvedores no geral. Esse tipo de linguagem exige muito conhecimento de quem a programa (inclusive relacionado \xE0 forma com que o processador opera uma instru\xE7\xE3o-m\xE1quina).</p>',4),v={href:"https://github.com/chrislgarry/Apollo-11",target:"_blank",rel:"noopener noreferrer"},k=a("em",null,"Apollo Guidance Computer.",-1),g=o('<p>Um programa escrito em uma dessas linguagens, chamadas de baixo n\xEDvel, \xE9 composto por uma s\xE9rie de instru\xE7\xF5es de m\xE1quina que determinam quais opera\xE7\xF5es o processador deve executar. Essas instru\xE7\xF5es s\xE3o convertidas para a linguagem que o processador entende, que \xE9 a linguagem bin\xE1ria (sequ\xEAncia de bits 0 e 1), que \xE9 categorizada como <em>First-generation programming language</em> (1GL), em livre tradu\xE7\xE3o: linguagem de programa\xE7\xE3o de primeira gera\xE7\xE3o.</p><h2 id="linguagens-de-alto-nivel" tabindex="-1"><a class="header-anchor" href="#linguagens-de-alto-nivel" aria-hidden="true">#</a> Linguagens de alto n\xEDvel</h2><p>Com a popularidade dos computadores criou-se um &quot;problema&quot; de alta demanda por software e, consequentemente, por programadores. Talvez voc\xEA esteja pensando que isso n\xE3o \xE9 exatamente um problema, e sim uma coisa boa, uma tend\xEAncia, um novo mercado. Faz sentido, at\xE9 certo ponto. O problema era encontrar m\xE3o de obra qualificada para codificar \xE0quelas instru\xE7\xF5es t\xE3o complicadas.</p><p>Com isso, novas linguagens surgiram e, cada vez mais, aproximavam-se da linguagem humana. Isso abriu &quot;fronteiras&quot; para que uma enorme gama de novos desenvolvedores se especializassem. Tais linguagens s\xE3o denominadas como sendo de alto n\xEDvel. As linguagens modernas que hoje conhecemos e usamos s\xE3o de alto n\xEDvel: C, PHP, Java, Rust, C#, Python, Ruby etc.</p><div class="custom-container tip"><p class="custom-container-title">Dica</p><p>Quanto mais pr\xF3xima da linguagem da m\xE1quina, mais baixo n\xEDvel \xE9 a linguagem. Quanto mais pr\xF3xima da linguagem humana, mais alto n\xEDvel ela \xE9.</p></div><h2 id="paradigmas-das-linguagens-de-programacao" tabindex="-1"><a class="header-anchor" href="#paradigmas-das-linguagens-de-programacao" aria-hidden="true">#</a> Paradigmas das linguagens de programa\xE7\xE3o</h2><p>Quando uma linguagem de programa\xE7\xE3o \xE9 criada, a partir das suas caracter\xEDsticas, ela \xE9 categorizada em um ou mais paradigmas.</p><p>A defini\xE7\xE3o do dicion\xE1rio Aur\xE9lio para &quot;paradigma&quot;:</p><ul><li>Algo que serve de exemplo geral ou de modelo.</li><li>Conjunto das formas que servem de modelo de deriva\xE7\xE3o ou de flex\xE3o.</li><li>Conjunto dos termos ou elementos que podem ocorrer na mesma posi\xE7\xE3o ou contexto de uma estrutura.</li></ul><p>O paradigma de uma linguagem de programa\xE7\xE3o \xE9 a sua identidade. Corresponde a um conjunto de caracter\xEDsticas que, juntas, definem como ela opera e resolve os problemas. Algumas linguagens, inclusive, possuem mais de um paradigma, s\xE3o as chamadas multi paradigmas.</p><p>Alguns dos principais paradigmas utilizados hoje no mercado:</p><ul><li>Funcional</li><li>L\xF3gico</li><li>Declarativo</li><li>Imperativo</li><li>Orientado a objetos</li><li>Orientado a eventos</li></ul><h3 id="paradigma-funcional" tabindex="-1"><a class="header-anchor" href="#paradigma-funcional" aria-hidden="true">#</a> Paradigma funcional</h3>',13),b=a("p",null,[n("O foco desse paradigma est\xE1 na avalia\xE7\xE3o de fun\xE7\xF5es. Como na matem\xE1tica quando temos, por exemplo, uma fun\xE7\xE3o "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"f"),a("mo",{stretchy:"false"},"("),a("mi",null,"x"),a("mo",{stretchy:"false"},")")]),a("annotation",{encoding:"application/x-tex"},"f(x)")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mclose"},")")])])]),n(":")],-1),h=a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mi",null,"f"),a("mo",{stretchy:"false"},"("),a("mi",null,"x"),a("mo",{stretchy:"false"},")"),a("mo",null,"="),a("mi",null,"x"),a("mo",null,"+"),a("mn",null,"2")]),a("annotation",{encoding:"application/x-tex"},"f(x) = x + 2 ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),a("span",{class:"mopen"},"("),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mclose"},")"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathnormal"},"x"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"2")])])])])],-1),f=a("p",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"x")]),a("annotation",{encoding:"application/x-tex"},"x")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal"},"x")])])]),n(" \xE9 um par\xE2metro (o valor de entrada) e, ap\xF3s a express\xE3o ser avaliada, obt\xEAm-se o resultado.")],-1),q=o(`<p>Se o valor de entrada for 2, o resultado da avalia\xE7\xE3o da nossa fun\xE7\xE3o ser\xE1 4.</p><p>Algumas das linguagens que atendem a esse paradigma: F# (da Microsoft), Lisp, Heskell, Erlang, Elixir, Mathematica.</p><p>\xC9 poss\xEDvel desenvolver de forma &quot;funcional&quot; mesmo em linguagens n\xE3o estritamente funcionais. Por exemplo, no PHP, que \xE9 uma linguagem multi paradigma, ter\xEDamos:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token variable">$sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$value</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token variable">$sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="paradigma-logico" tabindex="-1"><a class="header-anchor" href="#paradigma-logico" aria-hidden="true">#</a> Paradigma l\xF3gico</h3><p>Tamb\xE9m \xE9 conhecido como &quot;restritivo&quot;. Muito utilizado em aplica\xE7\xF5es de intelig\xEAncia artificial. Esse paradigma chega no resultado esperado a partir de avalia\xE7\xF5es l\xF3gico-matem\xE1ticas. Se voc\xEA j\xE1 estudou l\xF3gica de predicados ficar\xE1 confort\xE1vel em entender como uma linguagem nesse paradigma opera.</p><p>Principais elementos desse paradigma:</p><ul><li><strong>Proposi\xE7\xF5es:</strong> base de fatos concretos e conhecidos.</li><li><strong>Regras de infer\xEAncia:</strong> definem como deduzir proposi\xE7\xF5es.</li><li><strong>Busca:</strong> estrat\xE9gias para controle das infer\xEAncias.</li></ul><p>Exemplo:</p><p><strong>Proposi\xE7\xE3o</strong> : Chico \xE9 um gato.</p><p><strong>Regra de infer\xEAncia</strong> : Todo gato \xE9 um felino.</p><p><strong>Busca</strong> : Chico \xE9 um felino?</p><p>A resposta para a <strong>Busca</strong> acima precisa ser <strong>verdadeira</strong>. A conclus\xE3o l\xF3gica \xE9:</p><div class="custom-container tip"><p class="custom-container-title">Dicas</p><p>Se Chico \xE9 um gato e todo gato \xE9 felino, ent\xE3o Chico \xE9 um felino.</p></div><p>A ideia b\xE1sica da programa\xE7\xE3o em l\xF3gica \xE9:</p><div class="custom-container tip"><p class="custom-container-title">Prof. Dr. S\xEDlvio do Lago Pereira \u2013 DTI / FATEC-SP.</p><p>Oferecer um arcabou\xE7o que permita inferir conclus\xF5es desejadas, a partir de premissas, representando o conhecimento dispon\xEDvel, de uma forma que seja computacionalmente vi\xE1vel.</p></div><p>A linguagem mais conhecida que utiliza esse paradigma \xE9 a <strong>Prolog.</strong> Esse paradigma \xE9 pouco utilizado em aplica\xE7\xF5es comerciais, seu uso se d\xE1 mais na \xE1rea acad\xEAmica.</p><h3 id="paradigma-declarativo" tabindex="-1"><a class="header-anchor" href="#paradigma-declarativo" aria-hidden="true">#</a> Paradigma declarativo</h3><p>O paradigma declarativo \xE9 baseado no l\xF3gico e funcional. Linguagens declarativas descrevem o que fazem e n\xE3o exatamente como suas instru\xE7\xF5es funcionam.</p><p>Linguagens de marca\xE7\xE3o s\xE3o o melhor exemplo: HTML, XML, XSLT, XAML etc. N\xE3o obstante, o pr\xF3prio Prolog \u2013 reconhecido primariamente pelo paradigma l\xF3gico \u2013 tamb\xE9m \xE9 uma linguagem declarativa. Abaixo alguns exemplos dessas linguagens.</p><p>HTML:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Linguagens e paradigmas de programa\xE7\xE3o<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQL:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> nome <span class="token keyword">FROM</span> usuario <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="paradigma-imperativo" tabindex="-1"><a class="header-anchor" href="#paradigma-imperativo" aria-hidden="true">#</a> Paradigma imperativo</h3><p>Voc\xEA j\xE1 ouviu falar em &quot;programa\xE7\xE3o procedural&quot; ou em &quot;programa\xE7\xE3o modular&quot;? De modo geral, s\xE3o imperativas.</p><p>Linguagens cl\xE1ssicas como C, C++, PHP, Perl, C#, Ruby etc, &quot;suportam&quot; esse paradigma. Ele \xE9 focado na mudan\xE7a de estados de vari\xE1veis (ao contr\xE1rio dos anteriores).</p><p>Exemplo:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">if</span><span class="token punctuation">(</span>option <span class="token operator">==</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Op\xE7\xE3o &#39;A&#39; selecionada.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),x=a("p",null,[n("A impress\xE3o s\xF3 ser\xE1 realizada se o valor da vari\xE1vel "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"o"),a("mi",null,"p"),a("mi",null,"t"),a("mi",null,"i"),a("mi",null,"o"),a("mi",null,"n")]),a("annotation",{encoding:"application/x-tex"},"option")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal"},"o"),a("span",{class:"mord mathnormal"},"pt"),a("span",{class:"mord mathnormal"},"i"),a("span",{class:"mord mathnormal"},"o"),a("span",{class:"mord mathnormal"},"n")])])]),n(" for igual a "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"A")]),a("annotation",{encoding:"application/x-tex"},"A")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal"},"A")])])]),n(".")],-1),y=o('<h3 id="paradigma-orientado-a-objetos" tabindex="-1"><a class="header-anchor" href="#paradigma-orientado-a-objetos" aria-hidden="true">#</a> Paradigma orientado a objetos</h3><p>Esse \xE9, entre todos, talvez o mais difundido. Nesse paradigma, ao inv\xE9s de construirmos nossos sistemas com um conjunto estrito de procedimentos, assim como se faz em linguagens &quot;fortemente&quot; imperativas como o Cobol, Pascal etc, na orienta\xE7\xE3o a objetos utilizamos uma l\xF3gica bem pr\xF3xima do mundo real, lidando com objetos, estruturas que j\xE1 conhecemos e sobre as quais possu\xEDmos uma grande compreens\xE3o.</p><div class="custom-container tip"><p class="custom-container-title">Dica</p><p>OO \xE9 sigla para orienta\xE7\xE3o a objetos</p></div><p>O paradigma orientado a objetos tem uma grande preocupa\xE7\xE3o em esconder o que n\xE3o \xE9 importante e em real\xE7ar o que \xE9 importante. Nele, implementa-se um conjunto de classes que definem objetos. Cada classe determina o comportamento (definido nos m\xE9todos) e estados poss\xEDveis (atributos) de seus objetos, assim como o relacionamento entre eles.</p><p>Esse \xE9 o paradigma mais utilizado em aplica\xE7\xF5es comerciais e as principais linguagens o implementam: C#, Java, PHP, Ruby, C++, Python etc.</p><h3 id="paradigma-orientado-a-eventos" tabindex="-1"><a class="header-anchor" href="#paradigma-orientado-a-eventos" aria-hidden="true">#</a> Paradigma orientado a eventos</h3><p>Toda linguagem que faz uso de interface gr\xE1fica \xE9 baseada nesse paradigma. Nele, o fluxo de execu\xE7\xE3o do software \xE9 baseado na ocorr\xEAncia de eventos externos, normalmente disparados pelo usu\xE1rio.</p><p>O usu\xE1rio, ao interagir, decidir\xE1 em qual momento digitar, clicar no bot\xE3o de &quot;salvar&quot; etc. Essas decis\xF5es disparar\xE3o eventos. O usu\xE1rio \xE9, ent\xE3o, o respons\xE1vel por quando os eventos acontecer\xE3o, de tal forma que fluxo do programa fica sensivelmente atrelado \xE0 ocorr\xEAncias desses eventos.</p><p>Linguagens de programa\xE7\xE3o que fazem uso desse paradigma:</p><ul><li>Delphi</li><li>Visual Basic</li><li>C#</li><li>Python</li><li>Java etc.</li></ul><h1 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h1><p>Nesse cap\xEDtulo teremos um compilado de informa\xE7\xF5es que foram reunidas de v\xE1rios lugares (<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>, <sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup>, <sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup>, <sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup>). Bons Estudos.</p><h2 id="por-que-java" tabindex="-1"><a class="header-anchor" href="#por-que-java" aria-hidden="true">#</a> Por que Java?</h2><p>Existem diversas linguagens de programa\xE7\xE3o orientadas a objeto, cada uma com diferentes caracter\xEDsticas e apelos de mercado, educacionais ou acad\xEAmicos. Segue, algumas das raz\xF5es da escolha da linguagem Java.</p><p><strong>Java \xE9 obrigatoriamente orientada a objetos</strong> : Algumas linguagens permitem que objetos e vari\xE1veis existam em diversos pontos de um programa, como se estivessem desatreladas de qualquer estrutura. Em Java, todas as vari\xE1veis e m\xE9todos devem estar localizados dentro de classes, for\xE7ando o uso de orienta\xE7\xE3o a objetos at\xE9 mesmo em tarefas simples. Dessa forma, o estudante de programa\xE7\xE3o orientada a objetos que esteja usando Java estar\xE1 usando mais as t\xE9cnicas de POO.</p><p><strong>Java \xE9 simples</strong> : A estrutura de programas e classes em Java segue a organiza\xE7\xE3o de linguagens tradicionais como C e C++, mas sem elementos que tornam programas e programa\xE7\xE3o mais complexos. Ap\xF3s o aprendizado dos conceitos b\xE1sicos de programa\xE7\xE3o orientada a objetos, o estudante da linguagem pode come\xE7ar a criar aplicativos \xFAteis e complexos. A simplicidade se reflete tamb\xE9m na maneira com que arquivos contendo programas em Java s\xE3o compilados e executados: se as recomenda\xE7\xF5es b\xE1sicas forem seguidas, o compilador se encarregar\xE1 de compilar todas as classes necess\xE1rias em uma aplica\xE7\xE3o automaticamente, sem necessidade de arquivos adicionais de configura\xE7\xE3o e inclus\xE3o de bibliotecas.</p><p><strong>Java \xE9 port\xE1til</strong> : O c\xF3digo-fonte de um programa ou classe em Java pode ser compilado em qualquer computador, usando qualquer sistema operacional, contanto que este tenha uma m\xE1quina virtual Java adequada. Adicionalmente, as classes criadas podem ser copiadas e executadas em qualquer computador nas mesmas condi\xE7\xF5es, aumentando a utilidade da linguagem atrav\xE9s da independ\xEAncia de plataformas, contanto que vers\xF5es compat\xEDveis da m\xE1quina virtual sejam usadas.</p><p><strong>Java \xE9 gratuita</strong> : A m\xE1quina virtual Java, mencionada acima, est\xE1 \xE0 disposi\xE7\xE3o para c\xF3pia no site da Oracle e em v\xE1rios outros. Compiladores simples, de linha de comando (sem interfaces visuais elaboradas) fazem parte do JDK, o ambiente de desenvolvimento gratuito de Java. Aplica\xE7\xF5es em Java precisam de uma m\xE1quina virtual para sua execu\xE7\xE3o, mas n\xE3o existem limita\xE7\xF5es na distribui\xE7\xE3o da m\xE1quina virtual, fazendo de Java uma plataforma extremamente econ\xF4mica para desenvolvedores e usu\xE1rios finais.</p><p><strong>Java \xE9 robusta</strong> : Administra\xE7\xE3o de mem\xF3ria (aloca\xE7\xE3o e libera\xE7\xE3o) e o uso de ponteiros, duas das fontes de erros e bugs mais frequentes em programas em C e C++, s\xE3o administrados internamente na linguagem, de forma transparente para o programador. De maneira geral, programas em Java tem restri\xE7\xF5es no acesso \xE0 mem\xF3ria que resultam em maior seguran\xE7a para os programas sem diminuir a utilidade dos mesmos. Java tamb\xE9m tem um poderoso mecanismo de exce\xE7\xF5es que permite melhor tratamento de erros em tempo de execu\xE7\xE3o dos programas.</p><p><strong>Java tem bibliotecas prontas para diversas aplica\xE7\xF5es</strong> : As bibliotecas de classes de Java cont\xE9m v\xE1rias classes que implementam diversos mecanismos de entrada e sa\xEDda, acesso \xE0 Internet, manipula\xE7\xE3o de Strings em alto n\xEDvel, poderosas estruturas de dados, utilit\xE1rios diversos e um conjunto completo de classes para implementa\xE7\xE3o de interfaces gr\xE1ficas. Vale a pena relembrar que estas bibliotecas s\xE3o padr\xE3o de Java - qualquer m\xE1quina virtual Java permite o uso destas bibliotecas, sem a necessidade de instalar pacotes adicionais, e que mesmo que o compilador usado n\xE3o tenha interface gr\xE1fica similar \xE0 de linguagens visuais, os programas criados com este compilador podem ter interfaces gr\xE1ficas complexas.</p><h2 id="historia" tabindex="-1"><a class="header-anchor" href="#historia" aria-hidden="true">#</a> Hist\xF3ria</h2><p>A hist\xF3ria da tecnologia Java come\xE7ou modestamente no final de 1990, quando a empresa Sun Microsystems encarregou seus funcion\xE1rios Patrick Naughton, Mike Sheridan e James Gosling da tarefa de descobrir qual seria a pr\xF3xima grande tend\xEAncia na \xE1rea da computa\xE7\xE3o. O projeto, denominado &quot;Green Project&quot;, chegou \xE0 seguinte conclus\xE3o preliminar: a integra\xE7\xE3o dos dispositivos controlados digitalmente com os computadores iria se tornar uma tend\xEAncia muito importante.</p><p>Aquele revolucion\xE1rio dispositivo remoto, conectado \xE0 rede sem fio, rodava uma vers\xE3o do sistema operacional Unix e possu\xEDa uma tela sens\xEDvel ao toque (touchscreen) \u2013 lembre-se que est\xE1vamos em 1992 e, para se ter uma ideia do desenvolvimento da Internet naquela \xE9poca, basta dizer que, no final do ano, havia apenas 26 servidores Web no mundo! A interface de usu\xE1rio inclu\xEDa tamb\xE9m um assistente de ajuda: um simp\xE1tico personagem de desenho animado chamado <strong>Duke,</strong> que mais tarde seria adotado como mascote da plataforma Java.</p><p>O Star 7 incorporava &quot;uma nova linguagem de programa\xE7\xE3o din\xE2mica, compacta, segura, distribu\xEDda, robusta, interpretada, incorporando garbage collection e multi-threading, neutra \xE0 arquitetura de hardware e de alto desempenho&quot; a fim de solucionar os v\xE1rios problemas pertinentes ao desenvolvimento de programas para execu\xE7\xE3o na plataforma Star 7. James Gosling criou a linguagem e deu-lhe o nome de &quot;Oak&quot;, em homenagem a um enorme carvalho que podia ser visto da janela do seu escrit\xF3rio.</p><p>O &quot;Green Project&quot; teve o seu grande momento de gl\xF3ria e surgiu a oportunidade de produzir dispositivos similares ao Star 7 para consumidores em potencial na ind\xFAstria de TV a cabo. &quot;Equipe Green&quot; mudou de nome para &quot;FirstPerson&quot; e preparou um filme para demonstra\xE7\xE3o da sua tecnologia aos produtores de transcodificadores de TV e aluguel de v\xEDdeo. Mas, infelizmente para a equipe, aqueles setores, ainda na sua inf\xE2ncia, estavam em processo de cria\xE7\xE3o de modelos de neg\xF3cio vi\xE1veis. A despeito do insucesso da &quot;FirstPerson&quot; com a TV a cabo, o tipo de configura\xE7\xE3o da sua tecnologia de rede era id\xEAntica \xE0 configura\xE7\xE3o de rede para a Internet, que passava por um avassalador processo de populariza\xE7\xE3o.</p><p>A Internet usava a <em>HyperText Markup Language</em> (HTML) para transportar o conte\xFAdo de m\xEDdia \u2013 texto, v\xEDdeo, imagens, \xE1udio, etc. \u2013 atrav\xE9s de uma rede de dispositivos heterog\xEAneos. De uma forma similar, Java (um nome substituto para Oak, a fim de contornar problemas de natureza legal com outra linguagem de nome id\xEAntico) tamb\xE9m movimentava o conte\xFAdo de m\xEDdia atrav\xE9s de uma rede de dispositivos heterog\xEAneos, mas ia al\xE9m: transportava tamb\xE9m o seu &quot;comportamento&quot;, na forma de applets. A linguagem HTML n\xE3o conseguia fazer isso.</p><p>Para demonstrar a utilidade de Java numa Web baseada na Internet, a &quot;FirstPerson&quot; fez um clone do navegador Mosaic e, em 1994, o navegador WebRunner (mais tarde conhecido como HotJava), &quot;deu vida, pela primeira vez, a objetos animados e a conte\xFAdo execut\xE1vel dinamicamente dentro de um navegador.&quot;</p><p>John Gage, diretor do Escrit\xF3rio de Ci\xEAncias da Sun, e James Gosling, fizeram uma demonstra\xE7\xE3o do WebRunner numa reuni\xE3o com profissionais da Internet e da \xE1rea de entretenimento no in\xEDcio de 1995. A plateia aplaudiu calorosamente as demonstra\xE7\xF5es de uma mol\xE9cula tridimensional girat\xF3ria e a anima\xE7\xE3o de um algor\xEDtimo de ordena\xE7\xE3o preparado por Gosling, embutidas em p\xE1ginas Web apresentadas no WebRunner. O futuro certamente havia chegado. A not\xEDcia se espalhou rapidamente, e a &quot;FirstPerson&quot; disponibilizou o WebRunner para download.</p><p>Milhares de downloads chamaram a aten\xE7\xE3o da Sun para a popularidade de Java, e ela disponibilizou uma \xE1rea no seu site para divulgar essa tecnologia. Em maio de 1995, durante a abertura da feira SunWorld da Sun, o l\xEDder do projeto Netscape, Marc Andreessen, anunciou que iriam integrar Java ao novo navegador para a Web Netscape.</p><p>O Java \xE9 agora utilizado para desenvolver aplicativos corporativos de grande porte, aprimorar a funcionalidade de servidores da web (os computadores que fornecem o conte\xFAdo que vemos em nossos navegadores), fornecer aplicativos para dispositivos voltados ao consumo popular (por exemplo, telefones celulares, smartphones, televis\xE3o, set-up boxes etc.) e para muitos outros prop\xF3sitos. Ainda, ele tamb\xE9m \xE9 a linguagem-chave para desenvolvimento de aplicativos Android adequados a smartphones e tablets.</p><p>Devida a essa grande aplicabilidade em abril de 2009, a Oracle ofereceu US$ 7,4 bilh\xF5es pela aquisi\xE7\xE3o da Sun Microsystems e a proposta foi aceita. Essa aquisi\xE7\xE3o deu \xE0 Oracle a propriedade de v\xE1rios produtos, incluindo o Java e o sistema operacional Solaris. Em comunicado, a Oracle afirmou que o Java foi o software mais importante adquirido ao longo de sua hist\xF3ria. Muitas especula\xE7\xF5es foram feitas a cerca do futuro do Java depois de passar a ser propriedade da Oracle. Mais com certeza essa aquisi\xE7\xE3o contribuiu muito para que o Java tivesse um salto qualitativo.</p><h2 id="maquina-virtual" tabindex="-1"><a class="header-anchor" href="#maquina-virtual" aria-hidden="true">#</a> M\xE1quina Virtual</h2><p>Em uma linguagem de programa\xE7\xE3o como C e Pascal, temos a seguinte situa\xE7\xE3o quando vamos compilar um programa:</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0i_BoKr8Lb9mFRqx9JCzNIChCExomA3DVeI2nA54X9YzOprzF8RMu83NvyDgqpEHy9ON4OeKyGowWvioqnEGIXJH3a0XSVrf-NaagK5zgheAp4XTGKjSEg5p1IY4vFxSWCoVnyFB3Y_Ev75BpKi2kWD00" alt="uml diagram" loading="lazy"><figcaption> Representa\xE7\xE3o do processo de compila\xE7\xE3o.</figcaption></figure><p>O c\xF3digo fonte \xE9 compilado para c\xF3digo de m\xE1quina espec\xEDfico de uma plataforma e sistema operacional.</p><p>Muitas vezes o pr\xF3prio c\xF3digo fonte \xE9 desenvolvido visando uma \xFAnica plataforma!</p><p>Esse c\xF3digo execut\xE1vel (bin\xE1rio) resultante ser\xE1 executado pelo sistema operacional e, por esse motivo, ele deve saber conversar com o sistema operacional em quest\xE3o.</p><figure><img src="https://www.plantuml.com/plantuml/svg/VPBDIWCn4CVlUOgu29vsusvl8gLGF0WUfDMRbtnCji5yaMIjx-KZ-68ccw8jqa9Wal__bvd9a5LCDAJ9QBJwtQ4h0L9PmDldpUFBm_PryuHtAVbuHqYW-svKQJUnAKBWpYQmgUFE4A-fBTVRc8HMZ8nACnhoeksVvODA4Cb7tzsImm5TASlr960A-gWYCOe75vrCxLvPuVQnywMvCtJk9vUuY53lDLG2eVYkhC-z6MoSTNmNd04igOw0K1w3afGdB7jC8sxMtrz2ZGxBybhyPi7WzKrpX0tdiHDkSO7B8B9E06xW4ve2iluWC6MhC1o4_98gB10Am1Ereyxo_VM_cIrdBcSyvUgqgfcpdvhpdAgNjqZsRRlClSYXn079HOcvCYj6ISrc9wTXnIftLc35_ATg_040" alt="uml diagram" loading="lazy"><figcaption> Aplica\xE7\xE3o associada ao Sistema Operacional.</figcaption></figure><p>Isto \xE9, temos um c\xF3digo execut\xE1vel para cada sistema operacional. \xC9 necess\xE1rio compilar uma vez para Windows, outra para o Linux, e assim por diante, caso a gente queira que esse nosso software possa ser utilizado em v\xE1rias plataformas. Esse \xE9 o caso de aplicativos como o Eclipse, Firefox e outros.</p><p>Como foi dito anteriormente, na maioria das vezes, a sua aplica\xE7\xE3o se utiliza das bibliotecas do sistema operacional, como, por exemplo, a de interface gr\xE1fica para desenhar as &quot;telas&quot;. A biblioteca de interface gr\xE1fica do Windows \xE9 bem diferente das do Linux: como criar ent\xE3o uma aplica\xE7\xE3o que rode de forma parecida nos dois sistemas operacionais?</p><p>Precisamos reescrever um mesmo peda\xE7o da aplica\xE7\xE3o para diferentes sistemas operacionais, j\xE1 que eles n\xE3o s\xE3o compat\xEDveis.</p><p>J\xE1 o Java utiliza do conceito de m\xE1quina virtual, onde existe, entre o sistema operacional e a aplica\xE7\xE3o, uma camada extra respons\xE1vel por &quot;traduzir&quot; - mas n\xE3o apenas isso - o que sua aplica\xE7\xE3o deseja fazer para as respectivas chamadas do sistema operacional onde ela est\xE1 rodando no momento:</p><figure><img src="https://www.plantuml.com/plantuml/svg/VPBDJWCX58NtF0MTk9t1sHepQJGkR3GnhRhgXe7BbCfVW6drkNm4NqmOZDeQcq0uv7oNUtF2F4JguwWLcdyhDECWf06yUbZUFjwidfPtU1EZ2nU4UBfl1XatOpy6yCoQ22Osp6hY53Mvl0wHAzcJGQgU-hHe_MCvBoC4ickRS_9rGJDfc1evZ5xzwaYqPDu6AsAzbuRRVMXS7kuVEisJMfn4g7CAJX9RkgC5G2YyIEFIy1fhQopRUAi12we289HoaeAoY4MBQS3LzSSxbuF58iU1rmOqNgIdAeICvO2hgxS8BAagqtsBa0SMgHbKyYxFSjTkRJ36Y-Vx2TdkD3g2_gJHJIIymY5NSYXcBysXEILGl2IHQEikJTEd8tTCkwwx_69HkRoe3C_1yEcRbFCJ" alt="uml diagram" loading="lazy"><figcaption> Aplica\xE7\xE3o rodando em JVM.</figcaption></figure><p>Dessa forma, a maneira com a qual voc\xEA abre uma janela no Linux ou no Windows \xE9 a mesma: voc\xEA ganha independ\xEAncia de sistema operacional. Ou, melhor ainda, independ\xEAncia de plataforma em geral: n\xE3o \xE9 preciso se preocupar em qual sistema operacional sua aplica\xE7\xE3o est\xE1 rodando, nem em que tipo de m\xE1quina, configura\xE7\xF5es, etc.</p><p>Perceba que uma m\xE1quina virtual \xE9 um conceito bem mais amplo que o de um interpretador. Como o pr\xF3prio nome diz, uma m\xE1quina virtual \xE9 como um &quot;computador de mentira&quot;: tem tudo que um computador tem. Em outras palavras, ela \xE9 respons\xE1vel por gerenciar mem\xF3ria, threads, a pilha de execu\xE7\xE3o, etc.</p><p>Sua aplica\xE7\xE3o roda sem nenhum envolvimento com o sistema operacional! Sempre conversando apenas com a Java Virtual Machine (JVM).</p><p>Essa caracter\xEDstica \xE9 interessante: como tudo passa pela JVM, ela pode tirar m\xE9tricas, decidir onde \xE9 melhor alocar a mem\xF3ria, entre outros. Uma JVM isola totalmente a aplica\xE7\xE3o do sistema operacional. Se uma JVM termina abruptamente, s\xF3 as aplica\xE7\xF5es que estavam rodando nela ir\xE3o terminar: isso n\xE3o afetar\xE1 outras JVMs que estejam rodando no mesmo computador, nem afetar\xE1 o sistema operacional.</p><p>Essa camada de isolamento tamb\xE9m \xE9 interessante quando pensamos em um servidor que n\xE3o pode se sujeitar a rodar c\xF3digo que possa interferir na boa execu\xE7\xE3o de outras aplica\xE7\xF5es.</p><p>Essa camada, a m\xE1quina virtual, n\xE3o entende c\xF3digo java, ela entende um c\xF3digo de m\xE1quina espec\xEDfico. Esse c\xF3digo de m\xE1quina \xE9 gerado por um compilador java, como o <em>javac,</em> e \xE9 conhecido por <em>bytecode</em>, pois existem menos de 256 c\xF3digos de opera\xE7\xE3o dessa linguagem, e cada &quot;opcode&quot; gasta um byte. O compilador Java gera esse <em>bytecode</em> que, diferente das linguagens sem m\xE1quina virtual, vai servir para diferentes sistemas operacionais, j\xE1 que ele vai ser &quot;traduzido&quot; pela JVM.</p><div class="custom-container tip"><p class="custom-container-title">Write once, run anywhere</p><p>Esse era um slogan que a Sun usava para o Java, j\xE1 que voc\xEA n\xE3o precisa reescrever partes da sua aplica\xE7\xE3o toda vez que quiser mudar de sistema operacional</p></div><h2 id="java-lento-hotspot-e-jit" tabindex="-1"><a class="header-anchor" href="#java-lento-hotspot-e-jit" aria-hidden="true">#</a> Java lento? Hotspot e JIT</h2><p>Hotspot \xE9 a tecnologia que a JVM utiliza para detectar pontos quentes da sua aplica\xE7\xE3o: c\xF3digo que \xE9 executado muito, provavelmente dentro de um ou mais loops. Quando a JVM julgar necess\xE1rio, ela vai compilar estes c\xF3digos para instru\xE7\xF5es realmente nativas da plataforma, tendo em vista que isso vai provavelmente melhorar a performance da sua aplica\xE7\xE3o. Esse compilador \xE9 o JIT: Just inTime Compiler, o compilador que aparece &quot;bem na hora&quot; que voc\xEA precisa.</p><p>Voc\xEA pode pensar ent\xE3o: porque a JVM n\xE3o compila tudo antes de executar a aplica\xE7\xE3o? \xC9 que teoricamente compilar dinamicamente, a medida do necess\xE1rio, pode gerar uma performance melhor. O motivo \xE9 simples: imagine um .exe gerado pelo VisualBasic, pelo gcc ou pelo Delphi; ele \xE9 est\xE1tico. Ele j\xE1 foi otimizado baseado em heur\xEDsticas, o compilador pode ter tomado uma decis\xE3o n\xE3o t\xE3o boa.</p><p>J\xE1 a JVM, por estar compilando dinamicamente durante a execu\xE7\xE3o, pode perceber que um determinado c\xF3digo n\xE3o est\xE1 com performance adequada e otimizar mais um pouco aquele trecho, ou ainda mudar a estrat\xE9gia de otimiza\xE7\xE3o. \xC9 por esse motivo que as JVMs mais recentes em alguns casos chegam a ganhar de c\xF3digos C compilados com o GCC 3.x.</p><h2 id="versoes-do-java-e-a-confusao-do-java2" tabindex="-1"><a class="header-anchor" href="#versoes-do-java-e-a-confusao-do-java2" aria-hidden="true">#</a> Vers\xF5es do Java e a confus\xE3o do Java2</h2>',55),j={href:"http://java.io",target:"_blank",rel:"noopener noreferrer"},w=o('<p>Com o Java 1.2 houve um aumento grande no tamanho da API, e foi nesse momento em que trocaram a nomenclatura de Java para Java2, com o objetivo de diminuir a confus\xE3o que havia entre Java e Javascript. Mas lembre-se, n\xE3o h\xE1 vers\xE3o &quot;Java 2.0&quot;, o 2 foi incorporado ao nome, tornando-se Java2 1.2.</p><p>Depois vieram o Java2 1.3 e 1.4, e o Java 1.5 passou a se chamar Java 5, tanto por uma quest\xE3o de marketing e porque mudan\xE7as significativas na linguagem foram inclu\xEDdas. \xC9 nesse momento que o &quot;2&quot; do nome Java desaparece. Perceba que para fins de desenvolvimento, o Java 5 ainda \xE9 referido como Java 1.5. Hoje a \xFAltima vers\xE3o dispon\xEDvel do Java \xE9 a 20 <sup class="footnote-ref"><a href="#footnote7">[7]</a><a class="footnote-anchor" id="footnote-ref7"></a></sup>.</p><h2 id="jvm-jre-jdk-o-que-devo-baixar" tabindex="-1"><a class="header-anchor" href="#jvm-jre-jdk-o-que-devo-baixar" aria-hidden="true">#</a> JVM? JRE? JDK? O que devo baixar?</h2><p>O que gostar\xEDamos de baixar no site da Oracle?</p><p>JVM : Apenas a virtual machine, esse download n\xE3o existe, ela sempre vem acompanhada.</p><p>JRE : Java Runtime Environment, ambiente de execu\xE7\xE3o Java, formado pela JVM e bibliotecas, tudo que voc\xEA precisa para executar uma aplica\xE7\xE3o Java. Mas n\xF3s precisamos de mais.</p><p>JDK : Java Development Kit: N\xF3s, desenvolvedores, faremos o download do JDK do Java SE (Standard Edition). Ele \xE9 formado pela JRE somado a ferramentas, como o compilador.</p>',7),S={href:"http://www.oracle.com/technetwork/java/",target:"_blank",rel:"noopener noreferrer"},J=o(`<h1 id="codificando-com-java" tabindex="-1"><a class="header-anchor" href="#codificando-com-java" aria-hidden="true">#</a> Codificando com JAVA</h1><p>Em geral, as linguagens de programa\xE7\xE3o possuem conven\xE7\xF5es <sup class="footnote-ref"><a href="#footnote8">[8]</a><a class="footnote-anchor" id="footnote-ref8"></a></sup> para definir os nomes das vari\xE1veis. Essas conven\xE7\xF5es ajudam o desenvolvimento de um c\xF3digo mais leg\xEDvel.</p><p>Na conven\xE7\xE3o de nomes da linguagem Java, os nomes das vari\xE1veis devem seguir o padr\xE3o <strong>camel case</strong> com a primeira letra min\xFAscula <strong>(lower camel case).</strong> Veja alguns exemplos:</p><ul><li>nomeDoCliente</li><li>numeroDeAprovados</li></ul><h2 id="declarando-e-usando-variaveis" tabindex="-1"><a class="header-anchor" href="#declarando-e-usando-variaveis" aria-hidden="true">#</a> Declarando e usando vari\xE1veis</h2><p>Dentro de um bloco, podemos declarar vari\xE1veis e us\xE1-las. Em Java, toda vari\xE1vel tem um tipo que n\xE3o pode ser mudado, uma vez que declarado:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>tipoDaVariavel nomeDaVariavel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Por exemplo, \xE9 poss\xEDvel ter uma idade que guarda um n\xFAmero inteiro:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Com isso, voc\xEA declara a vari\xE1vel idade, que passa a existir a partir daquela linha. Ela \xE9 do tipo int, que guarda um n\xFAmero inteiro. A partir da\xED, voc\xEA pode us\xE1-la, primeiramente atribuindo valores.</p><p>A linha a seguir \xE9 a tradu\xE7\xE3o de: &quot;idade deve valer quinze\u201D.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Al\xE9m de atribuir, voc\xEA pode utilizar esse valor. O c\xF3digo a seguir declara novamente a vari\xE1vel idade com valor 15 e imprime seu valor na sa\xEDda padr\xE3o atrav\xE9s da chamada a System.out.println.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// declara a idade</span>
<span class="token keyword">int</span> idade<span class="token punctuation">;</span>
idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

<span class="token comment">// imprime a idade</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>idade<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Por fim, podemos utilizar o valor de uma vari\xE1vel para algum outro prop\xF3sito, como alterar ou definir uma segunda vari\xE1vel. O c\xF3digo a seguir cria uma vari\xE1vel chamada idadeNoAnoQueVem com valor de idade <strong>mais um.</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// calcula a idade no ano seguinte</span>
<span class="token keyword">int</span> idadeNoAnoQueVem<span class="token punctuation">;</span>
idadeNoAnoQueVem <span class="token operator">=</span> idade <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No mesmo momento que voc\xEA declara uma vari\xE1vel, tamb\xE9m \xE9 poss\xEDvel inicializ\xE1-la por praticidade:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18),_=a("p",null,[n("Voc\xEA pode usar os operadores "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"+")]),a("annotation",{encoding:"application/x-tex"},"+")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"+")])])]),n(", "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"\u2212")]),a("annotation",{encoding:"application/x-tex"},"-")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"\u2212")])])]),n(", "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"/")]),a("annotation",{encoding:"application/x-tex"},"/")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"/")])])]),n(" e "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"\u2217")]),a("annotation",{encoding:"application/x-tex"},"*")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4653em"}}),a("span",{class:"mord"},"\u2217")])])]),n(" para operar com n\xFAmeros, sendo eles respons\xE1veis pela adi\xE7\xE3o, subtra\xE7\xE3o, divis\xE3o e multiplica\xE7\xE3o, respectivamente. Al\xE9m desses operadores b\xE1sicos, h\xE1 o operador % (m\xF3dulo) que nada mais \xE9 que o "),a("strong",null,"resto de uma divis\xE3o inteira."),n(" Veja alguns exemplos:")],-1),A=o(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> quatro <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tres <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> oito <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> dezesseis <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> um <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 5 dividido por 2 d\xE1 2 e tem resto 1;</span>
                <span class="token comment">// o operador % pega o resto da divis\xE3o inteira</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Representar n\xFAmeros inteiros \xE9 f\xE1cil, mas como guardar valores reais, tais como fra\xE7\xF5es de n\xFAmeros inteiros e outros? Outro tipo de vari\xE1vel muito utilizado \xE9 o double, que armazena um n\xFAmero com ponto flutuante (e que tamb\xE9m pode armazenar um n\xFAmero inteiro).</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>O tipo boolean armazena um valor verdadeiro ou falso, e s\xF3: nada de n\xFAmeros, palavras ou endere\xE7os, como em algumas outras linguagens.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">boolean</span> verdade <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>true</code> e <code>false</code> s\xE3o palavras reservadas do Java. \xC9 comum que um boolean seja determinado atrav\xE9s de uma express\xE3o booleana, isto \xE9, um trecho de c\xF3digo que retorna um booleano, como o exemplo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> menorDeIdade <span class="token operator">=</span> idade <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>O tipo <code>char</code> guarda um, e apenas um, caractere. Esse caractere deve estar entre aspas simples. N\xE3o se esque\xE7a dessas duas caracter\xEDsticas de uma vari\xE1vel do tipo <code>char</code>! Por exemplo, ela n\xE3o pode guardar um c\xF3digo como &quot; pois o vazio n\xE3o \xE9 um caractere!</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">char</span> letra <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>letra<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Vari\xE1veis do tipo <code>char</code> s\xE3o pouco usadas no dia a dia Veremos mais a frente o uso das Strings, que usamos constantemente, por\xE9m estas n\xE3o s\xE3o definidas por um tipo primitivo.</p><h2 id="tipos-primitivos-e-valores" tabindex="-1"><a class="header-anchor" href="#tipos-primitivos-e-valores" aria-hidden="true">#</a> Tipos primitivos e valores</h2><p>Esses tipos de vari\xE1veis s\xE3o tipos primitivos do Java: o valor que elas guardam s\xE3o o real conte\xFAdo da vari\xE1vel. Quando voc\xEA utilizar o operador de atribui\xE7\xE3o <code>=</code> o valor ser\xE1 copiado.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// i recebe uma c\xF3pia do valor 5</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// j recebe uma c\xF3pia do valor de i</span>
i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// i vira 6, j continua 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Aqui, <code>i</code> fica com o valor de <code>6</code>. Mas e <code>j</code>? Na segunda linha, <code>j</code> est\xE1 valendo <code>5</code>. Quando <code>i</code> passa a valer <code>6</code>, ser\xE1 que <code>j</code> tamb\xE9m muda de valor? N\xE3o, pois o valor de um tipo primitivo sempre \xE9 copiado.</p><p>Apesar da linha <code>2</code> fazer <code>j = i</code>, a partir desse momento essas vari\xE1veis n\xE3o tem rela\xE7\xE3o nenhuma: o que acontece com uma, n\xE3o repete em nada com a outra</p><h2 id="o-if-e-o-else" tabindex="-1"><a class="header-anchor" href="#o-if-e-o-else" aria-hidden="true">#</a> O if e o else</h2><p>A sintaxe do if no Java \xE9 a seguinte:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condicaoBooleana<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    codigo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Uma <strong>condi\xE7\xE3o booleana</strong> \xE9 qualquer express\xE3o que retorne <code>true</code> ou <code>false</code>. Para isso, voc\xEA pode usar os operadores <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> e outros. Um exemplo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;N\xE3o pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Al\xE9m disso, voc\xEA pode usar a cl\xE1usula else para indicar o comportamento que deve ser executado no caso da express\xE3o booleana ser falsa:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;N\xE3o pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Voc\xEA pode concatenar express\xF5es booleanas atrav\xE9s dos operadores l\xF3gicos &quot;E&quot; e &quot;OU&quot;. O &quot;E&quot; \xE9 representado pelo <code>&amp;&amp;</code> e o &quot;OU&quot; \xE9 representado pelo <code>||</code>.</p><p>Um exemplo seria verificar se ele tem menos de 18 anos e se ele n\xE3o \xE9 amigo do dono:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> amigoDoDono <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> amigoDoDono <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;N\xE3o pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Esse c\xF3digo poderia ficar ainda mais leg\xEDvel, utilizando-se o operador de nega\xE7\xE3o, o <code>!</code>. Esse operador transforma o resultado de uma express\xE3o <code>booleana</code> de <code>false</code> para <code>true</code> e vice versa.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> amigoDoDono <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>amigoDoDono<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;N\xE3o pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba na linha 3 que o trecho <code>amigoDoDono == false</code> virou <code>!amigoDoDono</code>. Eles t\xEAm o mesmo valor.</p><p>Para comparar se uma vari\xE1vel tem o mesmo valor que outra vari\xE1vel ou valor, utilizamos o operador <code>==</code>. Perceba que utilizar o operador <code>=</code> dentro de um <code>if</code> vai retornar um erro de compila\xE7\xE3o, j\xE1 que o operador <code>=</code> \xE9 o de atribui\xE7\xE3o.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> mes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>mes <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Voc\xEA deveria estar de f\xE9rias&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loops" tabindex="-1"><a class="header-anchor" href="#loops" aria-hidden="true">#</a> Loops</h2><h3 id="o-while" tabindex="-1"><a class="header-anchor" href="#o-while" aria-hidden="true">#</a> O While</h3><p>O while \xE9 um comando usado para fazer um la\xE7o (loop), isto \xE9, repetir um trecho de c\xF3digo algumas vezes. A ideia \xE9 que esse trecho de c\xF3digo seja repetido enquanto uma determinada condi\xE7\xE3o permanecer verdadeira.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>idade<span class="token punctuation">)</span><span class="token punctuation">;</span>
    idade <span class="token operator">=</span> idade <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O trecho dentro do bloco do while ser\xE1 executado at\xE9 o momento em que a condi\xE7\xE3o <code>idade &lt; 18</code> passe a ser <code>falsa</code>. E isso ocorrer\xE1 exatamente no momento em que <code>idade == 18</code>, o que n\xE3o o far\xE1 imprimir <code>18</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>J\xE1 o while acima imprime de 0 a 9.</p><h3 id="o-for" tabindex="-1"><a class="header-anchor" href="#o-for" aria-hidden="true">#</a> O For</h3><p>Outro comando de loop extremamente utilizado \xE9 o for. A ideia \xE9 a mesma do while: fazer um trecho de c\xF3digo ser repetido enquanto uma condi\xE7\xE3o continuar verdadeira. Mas al\xE9m disso, o for isola tamb\xE9m um espa\xE7o para inicializa\xE7\xE3o de vari\xE1veis e o modificador dessas vari\xE1veis. Isso faz com que fiquem mais leg\xEDveis, as vari\xE1veis que s\xE3o relacionadas ao loop:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>inicializacao<span class="token punctuation">;</span> condicao<span class="token punctuation">;</span> incremento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    codigo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Um exemplo \xE9 o a seguir:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ol\xE1!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba que esse for poderia ser trocado por:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ol\xE1!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Por\xE9m, o c\xF3digo do for indica claramente que a vari\xE1vel <code>i</code> serve, em especial, para controlar a quantidade de la\xE7os executados. Quando usar o for? Quando usar o while? Depende do gosto e da ocasi\xE3o.</p><h3 id="controlando-loops" tabindex="-1"><a class="header-anchor" href="#controlando-loops" aria-hidden="true">#</a> Controlando loops</h3><p>Apesar de termos condi\xE7\xF5es booleanas nos nossos la\xE7os, em algum momento, podemos decidir parar o loop por algum motivo especial sem que o resto do la\xE7o seja executado.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">19</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Achei um n\xFAmero divis\xEDvel por 19 entre x(&quot;</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">&quot;) e y(&quot;</span><span class="token operator">+</span>y<span class="token operator">+</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O c\xF3digo acima vai percorrer os n\xFAmeros de <code>x</code> a <code>y</code> e parar quando encontrar um n\xFAmero divis\xEDvel por <code>19</code>, uma vez que foi utilizada a palavra chave <strong>break.</strong></p><p>Da mesma maneira, \xE9 poss\xEDvel obrigar o loop a executar o pr\xF3ximo la\xE7o. Para isso usamos a palavra chave <strong>continue.</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">?</p><p>O c\xF3digo acima n\xE3o vai imprimir alguns n\xFAmeros. (Quais exatamente?)</p></div><h2 id="escopos-e-blocos" tabindex="-1"><a class="header-anchor" href="#escopos-e-blocos" aria-hidden="true">#</a> Escopos e Blocos</h2><h3 id="escopo-das-variaveis" tabindex="-1"><a class="header-anchor" href="#escopo-das-variaveis" aria-hidden="true">#</a> Escopo das vari\xE1veis</h3><p>No Java, podemos declarar vari\xE1veis a qualquer momento. Por\xE9m, dependendo de onde voc\xEA as declarou, ela vai valer de um determinado ponto a outro.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// aqui a vari\xE1vel i n\xE3o existe</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// a partir daqui ela existe</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O <strong>escopo da vari\xE1vel</strong> \xE9 o nome dado ao trecho de c\xF3digo em que aquela vari\xE1vel existe e onde \xE9 poss\xEDvel acess\xE1-la.</p><p>Quando abrimos um novo bloco com as chaves, as vari\xE1veis declaradas ali dentro <strong>s\xF3 valem at\xE9 o fim daquele bloco</strong>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// aqui a vari\xE1vel i n\xE3o existe</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// a partir daqui ela existe</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>condicao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// o i ainda vale aqui</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token comment">// o j passa a existir</span>
<span class="token punctuation">}</span>
<span class="token comment">// aqui o j n\xE3o existe mais, mas o i continua dentro do escopo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No bloco acima, a vari\xE1vel <code>j</code> para de existir quando termina o bloco onde ela foi declarada. Se voc\xEA tentar acessar uma vari\xE1vel fora de seu escopo, ocorrer\xE1 um erro de compila\xE7\xE3o.</p><p>O mesmo vale para um if:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>algumBooleano<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cuidado!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Aqui a vari\xE1vel <code>i</code> n\xE3o existe fora do <code>if</code> e do <code>else</code>! Se voc\xEA declarar a vari\xE1vel antes do <code>if</code>, vai haver outro erro de compila\xE7\xE3o: dentro do <code>if</code> e do <code>else</code> a vari\xE1vel est\xE1 sendo redeclarada! Ent\xE3o o c\xF3digo para compilar e fazer sentido fica:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>algumBooleano<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Uma situa\xE7\xE3o parecida pode ocorrer com o for:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ol\xE1!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cuidado!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Neste for, a vari\xE1vel i morre ao seu t\xE9rmino, n\xE3o podendo ser acessada de fora do for, gerando um erro de compila\xE7\xE3o. Se voc\xEA realmente quer acessar o contador depois do loop terminar, precisa de algo como:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ol\xE1!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="um-bloco-dentro-do-outro" tabindex="-1"><a class="header-anchor" href="#um-bloco-dentro-do-outro" aria-hidden="true">#</a> Um bloco dentro do outro</h3><p>Um bloco tamb\xE9m pode ser declarado dentro de outro. Isto \xE9, um <code>if</code> dentro de um <code>for</code>, ou um <code>for</code> dentro de um <code>for</code>, algo como:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condicao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// c\xF3digo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h2><p><sup class="footnote-ref"><a href="#footnote9">[9]</a><a class="footnote-anchor" id="footnote-ref9"></a></sup></p><h3 id="o-problema" tabindex="-1"><a class="header-anchor" href="#o-problema" aria-hidden="true">#</a> O problema</h3><p>Dentro de um bloco, podemos declarar diversas vari\xE1veis e us\xE1-las:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade1<span class="token punctuation">;</span>
<span class="token keyword">int</span> idade2<span class="token punctuation">;</span>
<span class="token keyword">int</span> idade3<span class="token punctuation">;</span>
<span class="token keyword">int</span> idade4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Isso pode se tornar um problema quando precisamos mudar a quantidade de vari\xE1veis a serem declaradas de acordo com um par\xE2metro. Esse par\xE2metro pode variar, como por exemplo, a quantidade de n\xFAmero contidos num bilhete de loteria. Um jogo simples possui 6 n\xFAmeros, mas podemos comprar um bilhete mais caro, com 7 n\xFAmeros ou mais.</p><p>Para facilitar esse tipo de caso podemos declarar um <strong>vetor (array)</strong> de inteiros:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> idades <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>O que fazemos foi criar uma array de int de 10 posi\xE7\xF5es e atribuir o endere\xE7o no qual ela foi criada. Podemos ainda acessar as posi\xE7\xF5es do array:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>idades<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iqeoIt9IkHGKCbCIKrABWOmQ1GCWDWHY8o0s1c8J83O5OZCWDWTY2o2sLAW1gqL35gXyhjIy50M83Gv09jXc20q0" alt="uml diagram" loading="lazy"><figcaption>Representa\xE7\xE3o do vetor idade.</figcaption></figure><p>O c\xF3digo acima altera a sexta posi\xE7\xE3o do array. No Java, os \xEDndices do array v\xE3o de 0 a n-1, onde n \xE9 o tamanho dado no momento em que voc\xEA criou o array.</p><div class="custom-container danger"><p class="custom-container-title">Cuidado</p><p>Se voc\xEA tentar acessar uma posi\xE7\xE3o fora desse alcance, um erro ocorrer\xE1 durante a execu\xE7\xE3o.</p></div><p><sup class="footnote-ref"><a href="#footnote10">[10]</a><a class="footnote-anchor" id="footnote-ref10"></a></sup></p><ul><li>Em Java, os arrays s\xE3o criados atrav\xE9s do comando new.</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A vari\xE1vel <code>numeros</code> armazena a refer\xEAncia de um array criado na mem\xF3ria do computador atrav\xE9s do comando <code>new</code>. Na mem\xF3ria, o espa\xE7o ocupado por esse array est\xE1 dividido em 100 &quot;peda\xE7os&quot; iguais numerados de 0 at\xE9 99. Cada &quot;peda\xE7o&quot; pode armazenar um valor do tipo int.</p><h3 id="modificando-o-conteudo-de-um-array" tabindex="-1"><a class="header-anchor" href="#modificando-o-conteudo-de-um-array" aria-hidden="true">#</a> Modificando o conte\xFAdo de um array</h3><p>Para modificar o conte\xFAdo de um array, devemos escolher uma ou mais posi\xE7\xF5es que devem ser alteradas e utilizar a sintaxe abaixo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
numeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">136</span><span class="token punctuation">;</span>
numeros<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tamb\xE9m podemos definir os valores de cada posi\xE7\xE3o de um array no momento da sua cria\xE7\xE3o utilizando as sintaxes abaixo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">100</span> <span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span> <span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="acessando-o-conteudo-de-um-array" tabindex="-1"><a class="header-anchor" href="#acessando-o-conteudo-de-um-array" aria-hidden="true">#</a> Acessando o conte\xFAdo de um array</h3><p>Para acessar o conte\xFAdo de um array, devemos escolher uma ou mais posi\xE7\xF5es e utilizar a sintaxe abaixo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span> <span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numeros<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="percorrendo-um-array" tabindex="-1"><a class="header-anchor" href="#percorrendo-um-array" aria-hidden="true">#</a> Percorrendo um Array</h3><p>Quando trabalhamos com um array, uma das tarefas mais comuns \xE9 acessarmos todas ou algumas de suas posi\xE7\xF5es sistematicamente. Geralmente, fazemos isso para resgatar todos ou alguns dos valores armazenados e realizar algum processamento sobre tais informa\xE7\xF5es. Para percorrermos um array, utilizaremos a instru\xE7\xE3o de repeti\xE7\xE3o <code>for</code>. Podemos utilizar a instru\xE7\xE3o <code>while</code> tamb\xE9m. Por\xE9m, logo perceberemos que a sintaxe da instru\xE7\xE3o <code>for</code>, em geral, \xE9 mais apropriada quando estamos trabalhando com arrays.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    numeros<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para percorrer um array, \xE9 necess\xE1rio saber a quantidade de posi\xE7\xF5es do mesmo. Essa quantidade \xE9 definida quando o array \xE9 criado atrav\xE9s do comando new. Nem sempre essa informa\xE7\xE3o est\xE1 expl\xEDcita no c\xF3digo. Por exemplo, considere um m\xE9todo que imprima na sa\xEDda padr\xE3o os valores armazenados em um array. Provavelmente, esse m\xE9todo receber\xE1 como par\xE2metro um array e a quantidade de posi\xE7\xF5es desse array n\xE3o estar\xE1 expl\xEDcita no c\xF3digo fonte.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> imprimeArray <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementa\xE7\xE3o</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos recuperar a quantidade de posi\xE7\xF5es de um array acessando o seu atributo <code>length</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> imprimeArray <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numeros<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numeros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> foreach</h3><p>Para acessar todos os elementos de um array, \xE9 poss\xEDvel aplicar o comando for com uma sintaxe um pouco diferente.</p>`,105),z=a("div",{class:"language-java ext-java line-numbers-mode"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"void"),n(" imprimeArray "),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),n(" numeros "),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token keyword"},"for"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),n(" numero "),a("span",{class:"token operator"},":"),n(" numeros "),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token class-name"},"System"),a("span",{class:"token punctuation"},"."),n("out"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"println"),a("span",{class:"token punctuation"},"("),n("numero"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},";"),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),O=a("div",{class:"language-java ext-java line-numbers-mode"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"void"),n(" imprimeArray "),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),n(" numeros "),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token keyword"},"for"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),n(" i "),a("span",{class:"token operator"},"="),n(),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},";"),n(" i "),a("span",{class:"token operator"},"<"),n(" numeros"),a("span",{class:"token punctuation"},"."),n("length"),a("span",{class:"token punctuation"},";"),n(" i"),a("span",{class:"token operator"},"++"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token keyword"},"int"),n(" numero "),a("span",{class:"token operator"},"="),n(" numeros"),a("span",{class:"token punctuation"},"["),n("i"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),n(`
        `),a("span",{class:"token class-name"},"System"),a("span",{class:"token punctuation"},"."),n("out"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"println"),a("span",{class:"token punctuation"},"("),n("numero"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),E=o(`<h3 id="operacoes" tabindex="-1"><a class="header-anchor" href="#operacoes" aria-hidden="true">#</a> Opera\xE7\xF5es</h3><p>Nas bibliotecas da plataforma Java, existem m\xE9todos que realizam algumas tarefas \xFAteis relacionadas a arrays. Veremos esses m\xE9todos a seguir.</p><h4 id="ordenando-um-array" tabindex="-1"><a class="header-anchor" href="#ordenando-um-array" aria-hidden="true">#</a> Ordenando um Array</h4><p>Considere um array de String criado para armazenar nomes de pessoas. Podemos ordenar esses nomes atrav\xE9s do m\xE9todo <code>Arrays.sort()</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nomes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;rafael cosentino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jonas hirata&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;marcelo martins&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nomes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> nome <span class="token operator">:</span> nomes <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Analogamente, tamb\xE9m podemos ordenar n\xFAmeros.</p><h4 id="duplicando-um-array" tabindex="-1"><a class="header-anchor" href="#duplicando-um-array" aria-hidden="true">#</a> Duplicando um Array</h4><p>Para copiar o conte\xFAdo de um array para outro com maior capacidade, podemos utilizar o m\xE9todo <code>Arrays.copyOf()</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nomes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;rafael&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jonas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;marcelo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nomesDuplicados <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span> nomes <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="preenchendo-um-array" tabindex="-1"><a class="header-anchor" href="#preenchendo-um-array" aria-hidden="true">#</a> Preenchendo um Array</h4><p>Podemos preencher todas as posi\xE7\xF5es de um array com um valor espec\xEDfico utilizando o m\xE9todo <code>Arrays.fill()</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>numeros<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entrada-e-saida-de-dados" tabindex="-1"><a class="header-anchor" href="#entrada-e-saida-de-dados" aria-hidden="true">#</a> Entrada e Saida de Dados</h2><p>Quando falamos em entrada e sa\xEDda, estamos nos referindo a qualquer troca de informa\xE7\xE3o entre uma aplica\xE7\xE3o e o seu exterior.</p><p>A leitura do que o usu\xE1rio digita no teclado, o conte\xFAdo obtido de um arquivo ou os dados recebidos pela rede s\xE3o exemplos de entrada de dados. A impress\xE3o de mensagens no console, a escrita de texto em um arquivo ou envio de dados pela rede s\xE3o exemplos de sa\xEDda de dados.</p><p>A plataforma Java oferece diversas classes e interfaces para facilitar o processo de entrada e sa\xEDda. Em determinadas situa\xE7\xF5es, uma aplica\xE7\xE3o precisa fazer a entrada e sa\xEDda byte a byte mas, nem sempre isso \xE9 necess\xE1rio. Sendo assim, \xE9 mais simples utilizar a classe <code>Scanner</code> do pacote <code>java.util</code> do Java. Essa classe possui m\xE9todos mais sofisticados para obter os dados de uma entrada.</p><p>Veja um exemplo de leitura do teclado com a classe Scanner:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestaDeclaracaoScanner</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//L\xEA a partir da linha de comando</span>
    <span class="token class-name">Scanner</span> teclado <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Lendo um valor inteiro:</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe um n\xFAmero para a tabuada: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//Lendo um valor real:</span>
    <span class="token keyword">float</span> preco<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe o pre\xE7o da mercadoria = R$ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    preco <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//	Lendo um valor real:</span>
    <span class="token keyword">double</span> salario<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe o sal\xE1rio do Funcion\xE1rio = R$ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    salario <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//	Lendo uma String, usado na leitura de palavras simples que n\xE3o usam o caractere de espa\xE7o (ou barra de espa\xE7o):</span>
    <span class="token class-name">String</span> s<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe uma palavra simples:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//	Lendo uma String, usado na leitura de palavras compostas, por exemplo, Pato Branco:</span>
    <span class="token class-name">String</span> s<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe uma cadeia de caracteres:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//	Na leitura consecutiva de valores num\xE9ricos e String deve-se esvaziar o buffer do teclado antes da leitura do valor String, por exemplo:</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token class-name">String</span> s<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe um N\xFAmero Inteiro: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    teclado<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// esvazia o buffer do teclado</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe uma cadeia de caracteres:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="joptionpane" tabindex="-1"><a class="header-anchor" href="#joptionpane" aria-hidden="true">#</a> JOptionPane</h3><p><sup class="footnote-ref"><a href="#footnote11">[11]</a><a class="footnote-anchor" id="footnote-ref11"></a></sup></p><ul><li><p>At\xE9 agora vimos o m\xE9todo <code>System.out.println</code> para escrever informa\xE7\xF5es na tela (console).</p></li><li><p>A linguagem Java oferece diversas formas de intera\xE7\xE3o com o usu\xE1rio, a grande maioria em janelas.</p></li><li><p>Para evitar a cria\xE7\xE3o de uma interface completa, pode-se utilizar as chamadas caixas de di\xE1logo.</p></li><li><p>JOptionPane Oferece caixas de di\xE1logo predefinidas que permitem aos programas exibir mensagens aos usu\xE1rios;</p></li><li><p>exibir uma caixa de mensagem para informar o usu\xE1rio, usamos o m\xE9todo showMessageDialog(...):</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JOptionPane</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Ol\xE1 JOptionPane&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),P={href:"https://replit.com/@LeandroIFBA/JOptionPane#Main.java",target:"_blank",rel:"noopener noreferrer"},M=o(`<ul><li>H\xE1 uma outra forma de chamada para o m\xE9todo showMessageDialog, a qual permite melhorarmos o visual da caixa de mensagem:</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;Esta \xE9 uma mensagem&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Aten\xE7\xE3o&quot;</span><span class="token punctuation">,</span>  <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">WARNING_MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>JOptionPane.PLAIN_MESSAGE <ul><li>nenhum \xEDcone</li></ul></li><li>JOptionPane.ERROR_MESSAGE <ul><li>\xEDcone de erro</li></ul></li><li>JOptionPane.INFORMATION_MESSAGE <ul><li>\xEDcone de informa\xE7\xE3o</li></ul></li><li>JOptionPane.WARNING_MESSAGE <ul><li>\xEDcone de aviso</li></ul></li><li>JOptionPane.QUESTION_MESSAGE <ul><li>\xEDcone de interroga\xE7\xE3o</li></ul></li></ul><h4 id="system-exit" tabindex="-1"><a class="header-anchor" href="#system-exit" aria-hidden="true">#</a> System.exit</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//...</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>System.exit(0) \xE9 necess\xE1rio em programas com interface gr\xE1fica, terminando o aplicativo Java.</li><li>O retorno Zero(&#39;0&#39;) para o m\xE9todo exit() indica que o programa finalizou com sucesso.</li><li>Valores diferentes de zero significam erros na execu\xE7\xE3o e podem ser tratados por aplicativos que chamaram o programa Java.</li></ul><h3 id="showinputdialog" tabindex="-1"><a class="header-anchor" href="#showinputdialog" aria-hidden="true">#</a> showInputDialog</h3><ul><li>Exibir uma caixa de entrada</li><li>Retorna sempre a String digitada pelo usu\xE1rio.</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> nome<span class="token punctuation">;</span>
nome <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">&quot;Digite o seu nome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;Seu nome \xE9 &quot;</span><span class="token operator">+</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Varia\xE7\xE3o mais completa:</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>nome <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Por favor, digite o seu nome&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Aten\xE7\xE3o&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">INFORMATION_MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="conversoes-em-java" tabindex="-1"><a class="header-anchor" href="#conversoes-em-java" aria-hidden="true">#</a> Convers\xF5es em Java</h2><p><sup class="footnote-ref"><a href="#footnote12">[12]</a><a class="footnote-anchor" id="footnote-ref12"></a></sup></p><h3 id="convertendo-ascii-para-string" tabindex="-1"><a class="header-anchor" href="#convertendo-ascii-para-string" aria-hidden="true">#</a> Convertendo ASCII para String</h3><p>Voc\xEA pode converter c\xF3digos ASCII para String utilizando o m\xE9todo <code>toString()</code>, de acordo com o c\xF3digo abaixo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> aChar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-numeros-em-decimal-para-binario" tabindex="-1"><a class="header-anchor" href="#convertendo-numeros-em-decimal-para-binario" aria-hidden="true">#</a> Convertendo n\xFAmeros em decimal para bin\xE1rio</h3><p>\xC9 poss\xEDvel fazer a convers\xE3o de n\xFAmeros na base hexadecimal para bin\xE1rio atrav\xE9s do m\xE9todo <code>toBinaryString()</code>, como pode ser visto a seguir:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> binstr <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-um-double-para-um-string" tabindex="-1"><a class="header-anchor" href="#convertendo-um-double-para-um-string" aria-hidden="true">#</a> Convertendo um Double para um String</h3><p>Voc\xEA pode converter um vari\xE1vel do tipo <code>double</code> para um <code>String</code> usando o m\xE9todo <code>toString()</code> da classe <code>Double</code>, como apresentado a seguir:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">double</span> i <span class="token operator">=</span> <span class="token number">42.0</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-um-float-para-um-string" tabindex="-1"><a class="header-anchor" href="#convertendo-um-float-para-um-string" aria-hidden="true">#</a> Convertendo um float para um String</h3><p>Da mesma forma que a convers\xE3o do <code>Double</code>, voc\xEA utiliza o m\xE9todo <code>toString()</code> da classe <code>Float</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">12.0f</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-um-integer-para-codigo-ascii" tabindex="-1"><a class="header-anchor" href="#convertendo-um-integer-para-codigo-ascii" aria-hidden="true">#</a> Convertendo um integer para c\xF3digo ASCII</h3><p>Veja como fazer a convers\xE3o de um integer para ASCII:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span> <span class="token comment">// Voc\xEA ter\xE1 o valor 65</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-de-um-integer-para-uma-string" tabindex="-1"><a class="header-anchor" href="#convertendo-de-um-integer-para-uma-string" aria-hidden="true">#</a> Convertendo de um integer para uma String</h3><p>Veja no c\xF3digo abaixo duas formas de fazer a convers\xE3o de um <code>integer</code> para uma <code>String</code>:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//ou</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> i <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-de-um-long-para-uma-string" tabindex="-1"><a class="header-anchor" href="#convertendo-de-um-long-para-uma-string" aria-hidden="true">#</a> Convertendo de um long para uma String</h3><p>Voc\xEA pode fazer a convers\xE3o de <code>long</code> para <code>String</code> atrav\xE9s do m\xE9todo <code>toString</code> da classe <code>Long</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-de-uma-string-para-double" tabindex="-1"><a class="header-anchor" href="#convertendo-de-uma-string-para-double" aria-hidden="true">#</a> Convertendo de uma String para Double</h3><p>Voc\xEA pode converter um <code>String</code> para <code>double</code> utilizando o m\xE9todo <code>valueOf()</code> e <code>doubleValue()</code> da classe <code>Double</code>, como mostrado no trecho abaixo.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="convertendo-string-para-integer" tabindex="-1"><a class="header-anchor" href="#convertendo-string-para-integer" aria-hidden="true">#</a> Convertendo String para integer</h3><p>Fa\xE7a a convers\xE3o de um <code>String</code> para integer usando o m\xE9todo <code>parseInt()</code> da classe <code>Integer</code>, ou usando os m\xE9todos <code>valueOf()</code> e <code>intValue()</code> da classe <code>Integer</code> combinados, como mostra o c\xF3digo a seguir.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>str <span class="token operator">=</span> <span class="token string">&quot;25&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//ou</span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-uma-string-para-um-float" tabindex="-1"><a class="header-anchor" href="#convertendo-uma-string-para-um-float" aria-hidden="true">#</a> Convertendo uma String para um float</h3><p>Converta um String para float atrav\xE9s da combina\xE7\xE3o dos m\xE9todos <code>valueOf()</code> e <code>floatValue()</code> da classe <code>Float</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="convertendo-uma-string-para-um-long" tabindex="-1"><a class="header-anchor" href="#convertendo-uma-string-para-um-long" aria-hidden="true">#</a> Convertendo uma String para um long</h3><p>Voc\xEA pode fazer a convers\xE3o de um String para long usando o m\xE9todo parseLong() da classe Long, ou utilizando a combina\xE7\xE3o dos m\xE9todos <code>valueOf()</code> e <code>longValue()</code> tamb\xE9m da classe <code>Long</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//ou</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="enum" tabindex="-1"><a class="header-anchor" href="#enum" aria-hidden="true">#</a> Enum</h2><p><sup class="footnote-ref"><a href="#footnote13">[13]</a><a class="footnote-anchor" id="footnote-ref13"></a></sup></p><p>Um Java Enum \xE9 um tipo especial do Java usado para definir cole\xE7\xF5es de constantes. Mais precisamente, um tipo de enum Java \xE9 um tipo especial de classe Java. Um enum pode conter constantes, m\xE9todos, etc. Enums Java foram adicionados no Java 5.</p><h3 id="exemplo-enum" tabindex="-1"><a class="header-anchor" href="#exemplo-enum" aria-hidden="true">#</a> Exemplo Enum</h3><p>Aqui est\xE1 um exemplo simples de enum Java:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Level</span> <span class="token punctuation">{</span>
    <span class="token constant">HIGH</span><span class="token punctuation">,</span>
    <span class="token constant">MEDIUM</span><span class="token punctuation">,</span>
    <span class="token constant">LOW</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Observe a palavra <code>enum</code> \xE9 usada no lugar de <code>class</code> ou <code>interface</code>. A palavra-chave enum em Java sinaliza ao compilador Java que essa defini\xE7\xE3o de tipo \xE9 um enum.</p><p>Voc\xEA pode se referir \xE0s constantes no enum acima assim:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Level</span> level <span class="token operator">=</span> <span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">HIGH</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Observe como a vari\xE1vel level \xE9 do tipo Level que \xE9 o tipo enum Java definido no exemplo acima. A vari\xE1vel level pode tomar uma das Level constantes enum como valor ( HIGH, MEDIUM ou LOW). Nesse caso, level \xE9 definido como HIGH.</p><h2 id="pilha-de-execucao" tabindex="-1"><a class="header-anchor" href="#pilha-de-execucao" aria-hidden="true">#</a> Pilha de Execu\xE7\xE3o</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TestePilha</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;inicio do main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">metodo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fim do main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">metodo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;inicio do metodo1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">metodo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fim do metodo1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">metodo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;inicio do metodo2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fim do metodo2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>O m\xE9todo <code>main</code> chama <code>metodo1</code></li><li>O m\xE9todo <code>metodo1</code> chama o <code>metodo2</code></li></ul><p>Cada um desses m\xE9todos pode ter suas pr\xF3prias vari\xE1veis locais, sendo que, por exemplo, o <code>metodo1</code> n\xE3o enxerga as vari\xE1veis declaradas dentro do <code>main</code></p><p>Toda invoca\xE7\xE3o de m\xE9todo \xE9 empilhada em uma estrutura de dados que isola a \xE1rea de mem\xF3ria de cada um. Quando um m\xE9todo termina (retorna), ele volta para o m\xE9todo que o invocou. Ele descobre isso atrav\xE9s da pilha de execu\xE7\xE3o <strong>(stack)</strong></p><figure><img src="https://www.plantuml.com/plantuml/svg/ROyn2iCm34Ltdq9aQeSCzW6AZz2zT12nQ8mjsTZkL7Bt9Z6Kj5JBb_xx4iZMXgKzEIhxwMhmah4WWoH7bJBeWrTGGlSAJGtb4Gc6guypdjOBKpWFW1NoIy5QXmXJIowPdRBvJtMd-fTk8wENJNj4BOeDZBVPEqTo7o_R5kjlHraIj__MzGq0" alt="uml diagram" loading="lazy"><figcaption>Representa\xE7\xE3o de uma pilha de execu\xE7\xE3o.</figcaption></figure><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Refer\xEAncias</h2><hr class="footnotes-sep">`,64),C={class:"footnotes"},D={class:"footnotes-list"},I={id:"footnote1",class:"footnote-item"},V={href:"https://becode.com.br/programacao-orientada-a-objetos-poo/",target:"_blank",rel:"noopener noreferrer"},L=a("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1),N={id:"footnote2",class:"footnote-item"},T={href:"https://www.treinaweb.com.br/blog/linguagens-e-paradigmas-de-programacao/",target:"_blank",rel:"noopener noreferrer"},R=a("a",{href:"#footnote-ref2",class:"footnote-backref"},"\u21A9\uFE0E",-1),B=a("li",{id:"footnote3",class:"footnote-item"},[a("p",null,[n("P.D. DEITEL e H. Deitel.JAVA: como programar, 10a Edi\xE7\xE3o.Pearson, 2016. "),a("a",{href:"#footnote-ref3",class:"footnote-backref"},"\u21A9\uFE0E")])],-1),W={id:"footnote4",class:"footnote-item"},G={href:"http://Dornelles.As",target:"_blank",rel:"noopener noreferrer"},H={href:"https://becode.com.br/principais-linguagens-de-programacao/",target:"_blank",rel:"noopener noreferrer"},F=a("a",{href:"#footnote-ref4",class:"footnote-backref"},"\u21A9\uFE0E",-1),U={id:"footnote5",class:"footnote-item"},Q={href:"https://docs.oracle.com/javase/tutorial/getStarted/cupojava/win32.html",target:"_blank",rel:"noopener noreferrer"},K=a("a",{href:"#footnote-ref5",class:"footnote-backref"},"\u21A9\uFE0E",-1),X=a("li",{id:"footnote6",class:"footnote-item"},[a("p",null,[n("R. Santos.Introdu\xE7\xE3o \xE0 programa\xE7\xE3o orientada a objetos usando Java. Campus, 2003.ISBN:9788535212068. "),a("a",{href:"#footnote-ref6",class:"footnote-backref"},"\u21A9\uFE0E")])],-1),Y={id:"footnote7",class:"footnote-item"},Z={href:"https://www.oracle.com/news/announcement/oracle-releases-java-20-2023-03-21/",target:"_blank",rel:"noopener noreferrer"},$=a("a",{href:"#footnote-ref7",class:"footnote-backref"},"\u21A9\uFE0E",-1),aa={id:"footnote8",class:"footnote-item"},na={href:"https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html",target:"_blank",rel:"noopener noreferrer"},sa=a("a",{href:"#footnote-ref8",class:"footnote-backref"},"\u21A9\uFE0E",-1),ea=a("li",{id:"footnote9",class:"footnote-item"},[a("p",null,[n("Caelum. Java e Orienta\xE7\xE3o a Objetos - Curso fj-11. "),a("a",{href:"#footnote-ref9",class:"footnote-backref"},"\u21A9\uFE0E")])],-1),oa=a("li",{id:"footnote10",class:"footnote-item"},[a("p",null,[n("K19-Treinamentos. (2013). Orienta\xE7\xE3o a Objetos em Java, 220. "),a("a",{href:"#footnote-ref10",class:"footnote-backref"},"\u21A9\uFE0E")])],-1),ta={id:"footnote11",class:"footnote-item"},pa={href:"http://www.facom.ufu.br/~bacala/POO/",target:"_blank",rel:"noopener noreferrer"},ia=a("a",{href:"#footnote-ref11",class:"footnote-backref"},"\u21A9\uFE0E",-1),ca={id:"footnote12",class:"footnote-item"},ra={href:"https://www.devmedia.com.br/conversoes-em-java/2695",target:"_blank",rel:"noopener noreferrer"},la=a("a",{href:"#footnote-ref12",class:"footnote-backref"},"\u21A9\uFE0E",-1),ua={id:"footnote13",class:"footnote-item"},da={href:"http://tutorials.jenkov.com/",target:"_blank",rel:"noopener noreferrer"},ma=a("a",{href:"#footnote-ref13",class:"footnote-backref"},"\u21A9\uFE0E",-1);function va(ka,ga){const e=p("ExternalLinkIcon"),i=p("code-block"),c=p("code-group");return l(),u("div",null,[m,a("p",null,[n("Recentemente foi liberado o "),a("a",v,[n("c\xF3digo-conte"),s(e)]),n(" utilizado no computador que guiou a miss\xE3o Apollo que teve como principal objetivo levar o homem \xE0 lua (na t\xE3o famigerada corrida espacial entre a Uni\xE3o Sovi\xE9tica e os EUA), o "),k]),g,b,h,f,q,x,y,a("p",null,[n("Java 1.0 e 1.1 s\xE3o as vers\xF5es muito antigas do Java, mas j\xE1 traziam bibliotecas importantes como o JDBC e o "),a("a",j,[n("java.io"),s(e)]),n(".")]),w,a("p",null,[n("Tanto o JRE e o JDK podem ser baixados do site "),a("a",S,[n("http://www.oracle.com/technetwork/java/"),s(e)]),n(". Para encontr\xE1-los, acesse o link Java SE dentro dos top downloads. Consulte o ap\xEAndice de instala\xE7\xE3o do JDK para maiores detalhes.")]),J,_,A,s(c,null,{default:t(()=>[s(i,{title:"Foreach"},{default:t(()=>[z]),_:1}),s(i,{title:"Equivalente"},{default:t(()=>[O]),_:1})]),_:1}),E,a("p",null,[a("a",P,[n("Veja Rodando"),s(e)])]),M,a("section",C,[a("ol",D,[a("li",I,[a("p",null,[n("Jackson Pires .O que \xE9 Programa\xE7\xE3o Orientada a Objetos e porque voc\xEA precisa saber! "),a("a",V,[n("https://becode.com.br/programacao-orientada-a-objetos-poo/"),s(e)]),n(". (Acessado em 15/08/2019) "),L])]),a("li",N,[a("p",null,[n("Kennedy Tedesco. Linguagens e paradigmas de programa\xE7\xE3o - Blog da TreinaWeb. "),a("a",T,[n("https://www.treinaweb.com.br/blog/linguagens-e-paradigmas-de-programacao/"),s(e)]),n(". (Acessado em 07/08/2019). "),R])]),B,a("li",W,[a("p",null,[n("Nemora "),a("a",G,[n("Dornelles.As"),s(e)]),n(" 15 principais linguagens de programa\xE7\xE3o do mundo! | Becode. "),a("a",H,[n("https://becode.com.br/principais-linguagens-de-programacao/"),s(e)]),n(". (Acessado em 15/08/2019). "),F])]),a("li",U,[a("p",null,[n('Oracle."Hello World!" for Microsoft Windows (The Java\u2122Tutorials > Getting Started> The "Hello World!" Application). '),a("a",Q,[n("https://docs.oracle.com/javase/tutorial/getStarted/cupojava/win32.html"),s(e)]),n(". (Acessado em 07/08/2019). "),K])]),X,a("li",Y,[a("p",null,[a("a",Z,[n("https://www.oracle.com/news/announcement/oracle-releases-java-20-2023-03-21/"),s(e)]),n(),$])]),a("li",aa,[a("p",null,[n("Oracle. Code Conventions for the Java Programming Language: 9. Naming Conventions "),a("a",na,[n("https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html"),s(e)]),n(" (Acessado em 17/07/2021) "),sa])]),ea,oa,a("li",ta,[a("p",null,[n("Bacal\xE1, S\xEDlvio. P\xE1gina do Professor S\xEDlvio Bacal\xE1 J\xFAnior. "),a("a",pa,[n("http://www.facom.ufu.br/~bacala/POO/"),s(e)]),n(),ia])]),a("li",ca,[a("p",null,[n("Convers\xF5es em Java "),a("a",ra,[n("https://www.devmedia.com.br/conversoes-em-java/2695"),s(e)]),n(". (Acessado em 05/10/2022) "),la])]),a("li",ua,[a("p",null,[n("Jakob Jenkov. Tutorials for Software Developers and Technopreneurs! "),a("a",da,[n("http://tutorials.jenkov.com/"),s(e)]),n(". (Acessado em 03/11/2021) "),ma])])])])])}const fa=r(d,[["render",va],["__file","01_introducao.html.vue"]]);export{fa as default};
