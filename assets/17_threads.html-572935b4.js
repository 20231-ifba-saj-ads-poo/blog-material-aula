import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,f as o,e as a}from"./app-75bcf8be.js";const t={},i=a(`<h1 id="threads" tabindex="-1"><a class="header-anchor" href="#threads" aria-hidden="true">#</a> Threads</h1><ul><li>Threads são linhas de execuções que realizam tarefas simultâneas (caso tenhamos mais de 1 processador) ou de forma a compartilhar o processamento.</li><li>Cada thread é como um programa individual que tem total poder sobre a CPU.</li><li>Java suporta explicitamente como parte da linguagem.</li><li>Com o uso de Threads é possível dividir o programa em dois ou mais processos que podem rodar de forma paralela.</li><li>Multithreading implica em duas ou mais tarefas rodando de forma concorrente (aparentemente em paralelo) dentro de um mesmo programa.</li><li>Alguns programas necessitam fazer várias tarefas que requerem recursos computacionais diversos. Se estas tarefas podem ser feitas independentemente, então é possível usar threads para que o programa não fique limitado a performance dos recursos lentos (I/O).</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/VP5D2iCW48NNzHIpwwuG_zOUehlYOY2X58mf6KlfxJD654iW6ncVxtt3E8uIhkap1o7SNZunfYGUzy53G4e41aRy4IkoAgfJzWm19iYHAy4KHtvHXxJwzyhg5RdNZRiXiQnhpjOSA-EBte5li4GWd2TObs-n3xuuUh9gPAuRs5Imhc1p1bQ-E7gmRk1BdhsXxU5Vx1bQ-kBeqQQX7Pzb1RdYlMm0" alt="uml diagram"><figcaption>Exemplo de uso de tempo do processador pelas Threads.</figcaption></figure><br><figure><img src="https://www.plantuml.com/plantuml/svg/RL4n3iCW3Dnv1LANTeYwPwYoTkeRI74af61JOfJszuM4GADqmhux-ywYcrXv3dOKNQbYmI1HJKzZ0Paou3mXgzp06vw15UgDxKTw1L2w22O7_eVNvAsfhINFIfvwJpCAKRraqzooaspb4kby4Hb8N3LkfGyOoOgiWiqupi_Ay56nHKa68u0xAjPqhHoCZUh_FkNWgBjV7wBsknFIYaJNM3iQYStmYTjBgCCqWtKaXUW0zV9Hw_i5" alt="uml diagram"><figcaption>Diagrama de estado de uma Thread.</figcaption></figure><ul><li><p>Existem duas formas para criar um thread:</p><ul><li>Estendendo a classe <code>Thread</code></li><li>Implementando a interface <code>Runnable</code>.</li></ul></li><li><p>Nos dois casos é necessário sobrescrever o método <code>run()</code> que é o &quot; main()&quot; do thread.</p></li><li><p>O método run deve conter a execução que irá rodar pelo tempo de vida do thread. Quando o método terminar, o thread morre.</p></li><li><p>Para iniciar o thread é necessário chamar o método <code>start()</code> .</p></li><li><p>É a maquina virtual quem controla a execução e o ciclo de vida do thread.</p></li></ul><h2 id="herdando-a-classe-thread" tabindex="-1"><a class="header-anchor" href="#herdando-a-classe-thread" aria-hidden="true">#</a> Herdando a classe Thread</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinhaThread</span>  <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MinhaThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
            
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;Thread &quot;</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">&quot;: &quot;</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="implementando-a-interface-runnable" tabindex="-1"><a class="header-anchor" href="#implementando-a-interface-runnable" aria-hidden="true">#</a> Implementando a interface Runnable</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MeuRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MeuRunnable</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">1000000</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;Runnable &quot;</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">&quot;: &quot;</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="executando-threads" tabindex="-1"><a class="header-anchor" href="#executando-threads" aria-hidden="true">#</a> Executando Threads</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;inicio main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
        <span class="token class-name">MinhaThread</span> ta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinhaThread</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        ta<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MinhaThread</span> tb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinhaThread</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        tb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MeuRunnable</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MeuRunnable</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fim main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Estendendo a classe Thread significa que a subclasse não pode estender qualquer outra classe, enquanto que a classe que implementa a interface Runnable tem essa opção.</li></ul><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized" aria-hidden="true">#</a> Synchronized</h2><ul><li>Permite que blocos sensíveis ao acesso simultâneo sejam protegidos de corrupção</li><li>Impede que objetos os utilizem ao mesmo tempo. <ul><li>Se um recurso crítico está sendo usado, só um thread tem acesso.</li><li>É preciso que os outros esperem até que o recurso esteja livre.</li></ul></li><li>Métodos sincronizados são métodos que são usados para controlar o acesso a um objeto.</li><li>Uma thread apenas executa um método sincronizado depois que adquiriu o bloqueio para o objeto do método ou classe.</li><li>Se o bloqueio já está em poder de outra thread, a thread chamada aguarda.</li><li>Uma thread abandona o bloqueio simplesmente ao finalizar do método sincronizado, permitindo que a próxima thread esperando por este bloqueio possa prosseguir.</li><li>Métodos sincronizados são úteis em situações em que os métodos podem manipular o estado de um objeto de formas que podem corromper o estado, se executados simultaneamente.</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//...</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">metodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// conteudo do metodo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//...</span>

<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">metodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// conteudo do metodo</span>
<span class="token punctuation">}</span>

<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="estados-de-uma-thread" tabindex="-1"><a class="header-anchor" href="#estados-de-uma-thread" aria-hidden="true">#</a> Estados de uma Thread</h2><ul><li>Nova Thread <ul><li>Quando uma Thread é criada mas não foi chamado o start()</li></ul></li><li>Rodando <ul><li>Quando o método start() é chamado em uma nova thread ela altera o seu estado para em execução é chamando o método run()</li></ul></li><li>Não Execução <ul><li>Uma thread interrompe sua execução quando um quatro seguintes eventos ocorrem: <ul><li>Quando o método sleep() é chamado e ele dorme por um período de tempo especificado</li><li>Quando o método suspend() é invocado</li><li>Quando o método wait() é chamado e a thread espera para a notificação de um recurso livre ou aguarda a conclusão de outra thread ou espera para adquirir um bloqueio de um objeto.</li><li>A thread está bloqueado em I / O e aguarda a sua conclusão</li></ul></li></ul></li></ul><h2 id="acessando-informacoes-da-threads" tabindex="-1"><a class="header-anchor" href="#acessando-informacoes-da-threads" aria-hidden="true">#</a> Acessando informações da Threads</h2><p>Thread.currentThread() pode retornar uma saída como Thread [threadA, 5, main]</p><ul><li>Sendo <ul><li>nome da Thread</li><li>prioridade da thread</li><li>nome do grupo a que pertence</li></ul></li></ul><h2 id="prioridade-de-execucao" tabindex="-1"><a class="header-anchor" href="#prioridade-de-execucao" aria-hidden="true">#</a> Prioridade de Execução</h2><ul><li>Nas threads a prioridade pode ser setada a qualquer momento <ul><li>setPriority()</li><li>getPriority()</li></ul></li><li>Thread <ul><li>MIN_PRIORITY (0)</li><li>NORM_PRIORITY (5)</li><li>MAX_PRIORITY (10)</li></ul></li></ul><h2 id="gerenciando-as-threads" tabindex="-1"><a class="header-anchor" href="#gerenciando-as-threads" aria-hidden="true">#</a> Gerenciando as Threads</h2><ul><li>Dormir e acordar <ul><li>A classe thread contém um método estático chamado sleep() que faz a thread em execução no momento pause sua execução e mude para o estado de sono. A thread vai dormir por pelo menos o tempo especificado em seu parâmetro, antes de entrar no estado executável.</li></ul></li><li>Waiting and Notifying <ul><li>Esperando e notificando fornecer os meios de comunicação entre as thread que sincroniza sobre o mesmo objeto.</li><li>As threads executam os métodos wait() e notify() (ou notifyAll()) no objeto compartilhado para esta finalidade.</li><li>O notifyAll (), notify() e wait() são métodos da classe Object. Estes métodos podem ser chamados apenas a partir de dentro de um contexto sincronizado (método sincronizado ou bloco sincronizado), caso contrário, a chamada irá resultar em um IllegalMonitorStateException.</li><li>O notifyAll() método acorda todas as threads em espera no recurso. Nesta situação, as threads despertadas competem para o recurso. Uma threads recebe o recurso e os outros vão voltar a esperar.</li></ul></li></ul>`,25),l=a('<h1 id="links-w3schools" tabindex="-1"><a class="header-anchor" href="#links-w3schools" aria-hidden="true">#</a> Links w3schools</h1><ul><li><a href="https://www.w3schools.blog/thread-life-cycle-in-java">Thread life cycle</a></li><li><a href="https://www.w3schools.blog/way-of-creating-thread-in-java">Way of creating thread</a></li><li><a href="https://www.w3schools.blog/better-way-to-create-a-thread-in-java">Which is a better way to create a thread?</a></li><li><a href="https://www.w3schools.blog/methods-of-thread-class">Methods of Thread class</a></li><li><a href="https://www.w3schools.blog/thread-start-vs-run-method">Difference between thread start and run method</a></li><li><a href="https://www.w3schools.blog/why-we-call-start-method-in-thread">Why we call start method in thread?</a></li><li><a href="https://www.w3schools.blog/override-start-method-in-thread">Can we override start method?</a></li><li><a href="https://www.w3schools.blog/override-run-method-in-thread">Can we override run method?</a></li><li><a href="https://www.w3schools.blog/start-a-thread-twice">Is it possible to start a thread twice?</a></li><li><a href="https://www.w3schools.blog/thread-scheduling-in-java">Thread scheduling</a></li><li><a href="https://www.w3schools.blog/thread-priority-in-java">Thread priority</a></li><li><a href="https://www.w3schools.blog/naming-a-thread-in-java">Naming a thread</a></li><li><a href="https://www.w3schools.blog/joining-a-thread-in-java">What is join method?</a></li><li><a href="https://www.w3schools.blog/daemon-thread-in-java">Daemon thread</a></li><li><a href="https://www.w3schools.blog/call-run-method-directly">Can we call run method directly?</a></li><li><a href="https://www.w3schools.blog/yield-sleep-thread-methods">What is the difference between sleep and yield method?</a></li><li><a href="https://www.w3schools.blog/deadlock-in-java">Deadlock</a></li><li><a href="https://www.w3schools.blog/starvation-in-java">Starvation</a></li><li><a href="https://www.w3schools.blog/inter-thread-communication-in-java">Inter-thread communication</a></li><li><a href="https://www.w3schools.blog/synchronization-in-java">Synchronization</a></li><li><a href="https://www.w3schools.blog/synchronized-method-in-java">Synchronized method</a></li><li><a href="https://www.w3schools.blog/static-synchronization-in-java">Static synchronization</a></li><li><a href="https://www.w3schools.blog/synchronized-block-in-java">Synchronized block</a></li></ul>',2);function p(c,r){return n(),e("div",null,[i,o(`
TODO: Add Java CompletableFuture
TODO: Add Java Callable
https://www.baeldung.com/java-asynchronous-programming
https://www.devmedia.com.br/processamento-assincrono-em-java-com-future-e-futuretask/33851
https://www.digitalocean.com/community/tutorials/java-callable-future-example

https://howtodoinjava.com/java/multi-threading/java-callable-future-example/

`),l])}const m=s(t,[["render",p],["__file","17_threads.html.vue"]]);export{m as default};
