import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,e}from"./app-c9a3be33.js";const o={},t=e(`<h1 id="heranca" tabindex="-1"><a class="header-anchor" href="#heranca" aria-hidden="true">#</a> Herança</h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><ul><li><p>É a capacidade de uma classe definir o seu comportamento e sua estrutura aproveitando definições de outra classe, normalmente conhecida como classe base ou classe pai</p><ul><li>As subclasses herdam tudo o que a classe pai possui e acrescenta as suas características particulares</li><li>Através do mecanismo de herança é possível definirmos classes genéricas que agreguem um conjunto de definições comuns a um grande número de objetos(Generalização)</li><li>A partir destas especializações genéricas podemos construir novas classes, mais específicas, que acrescentem novas características e comportamentos aos já existentes (Especialização)</li></ul></li><li><p>Capacidade que uma classe tem de herdar as características e comportamentos de outra classe</p></li><li><p>Classe pai é chamada de superclasse e a filha de subclasse</p></li><li><p>Em Java só é permitido herdar de uma única classe, ou seja, não permite herança múltipla</p></li><li><p>O objetivo da herança é especializar o entendimento de uma classe criando novas características e comportamentos que vão além da superclasse</p></li><li><p>Ao mesmo tempo que a especialização amplia o entendimento de uma classe, a generalização vai no sentido inverso e define um modelo menos especializado e mais genérico</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mamifero</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> altura<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> peso<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mamar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Mamifero mamando&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Morcego</span> <span class="token keyword">extends</span> <span class="token class-name">Mamifero</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> tamanhoPresa<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">voar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Morcego voando&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Classe Morcego <ul><li>Quais as características de morcego? <ul><li>altura</li><li>peso</li><li>tamanhoPresa</li></ul></li><li>Quais ações o morcego pode fazer? <ul><li>mamar</li><li>voar</li></ul></li></ul></li><li>Se usarmos os princípios de lógica podemos dizer que todo morcego é mamífero porém NÃO podemos afirmar que todo mamífero é morcego</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Mamifero</span> animalMamifero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Morcego</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Morcego</span> batman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mamifero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//erro</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Com base no que foi dito até aqui podemos deduzir que o item 2 deve causar um erro já que não é possível garantir que todo mamífero seja um morcego</li><li>Já o item 1 pode parecer estranho, pois a variável é do tipo Mamífero e o objeto para o qual a variável se refere é do tipo Morcego <ul><li>Devemos saber que toda variável pode receber um objeto que seja compatível com o seu tipo e neste caso todo Morcego CERTAMENTE <strong>é um</strong> Mamífero</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Mamifero</span> animalMamifero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Morcego</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animalMamifero<span class="token punctuation">.</span><span class="token function">mamar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animalMamifero<span class="token punctuation">.</span><span class="token function">voar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//erro</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Todo <code>Morcego</code> <strong>é um</strong> <code>Mamifero</code>, porem não pode realizar todas as ações de um <code>morcego</code></li><li>A variável <code>animalMamifero</code> que recebe o objeto é do tipo <code>Mamifero</code></li><li>Para o <code>Morcego</code> <code>voar</code> é necessário criar uma nova variável do tipo <code>Morcego</code> e atribuir o objeto que estava na variável <code>animalMamifero</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Mamifero</span> animalMamifero <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Morcego</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animalMamifero<span class="token punctuation">.</span><span class="token function">mamar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Morcego</span> batman <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Morcego</span><span class="token punctuation">)</span>animalMamifero<span class="token punctuation">;</span>
batman<span class="token punctuation">.</span><span class="token function">voar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Este tipo de operação recebe o nome de <strong>TYPE CAST</strong></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/JOux3i8m343tdC8Z2EK63Ba04bSmZMaZ9J6odIxGkrErfCABF_9xTb13iLQo2qVbXeogSCEIdYJyTh26JzK0ipN1lO_S7fdWHShRu39pYb2me9pERZaiB0EDNVA3RDsg4z-55F_WcJlRRyFrutrtk40rRg_k-Gi0" alt="uml diagram"><figcaption> UML Herança Morcego e Mamifero.</figcaption></figure><figure><img src="https://www.plantuml.com/plantuml/svg/LP0zRiCm34Ptde9mb_GAxMAWSu0U80jjVtKLK9H1IMc18dUlOpK_dVX0uV41wdCHBpKgzLVYDmzYK-8QEGr7bCJ2o_eMd2VXN8TH9MSGgGnGxWnVl4y-Oawxvux8CHQnMS7TtxhZfqKKimFsgi7mqh3WkpJykHuh4iK-qxiZoy5EINoz-QZV7MR-rv8OFk2Nc6WOCMX5YssqUHUwfKHBzJMo8AU3nJNSMdVxvj2PpapKmwRjhzhy1G00" alt="uml diagram"><figcaption>Criando um objeto a partir da subclasse.</figcaption></figure><h2 id="outros-exemplos" tabindex="-1"><a class="header-anchor" href="#outros-exemplos" aria-hidden="true">#</a> Outros exemplos</h2><h3 id="caelum" tabindex="-1"><a class="header-anchor" href="#caelum" aria-hidden="true">#</a> Caelum</h3><p><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><p>Como toda empresa, nosso Banco possui funcionários. Vamos modelar a classe <code>Funcionario</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token class-name">String</span> cpf<span class="token punctuation">;</span>
    <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token comment">// métodos devem vir aqui</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Além de um funcionário comum, há também outros cargos, como os gerentes. Os gerentes guardam a mesma informação que um funcionário comum, mas possuem outras informações, além de ter funcionalidades um pouco diferentes. Um gerente no nosso banco possui também uma senha numérica que permite o acesso ao sistema interno do banco, além do número de funcionários que ele gerencia:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token class-name">String</span> cpf<span class="token punctuation">;</span>
    <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">autentica</span><span class="token punctuation">(</span><span class="token keyword">int</span> senha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>senha <span class="token operator">==</span> senha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Acesso Permitido!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Acesso Negado!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// outros métodos</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Precisamos mesmo de outra classe?</p><p>Poderíamos ter deixado a classe <code>Funcionario</code> mais genérica, mantendo nela senha de acesso, e o número de funcionários gerenciados. Caso o funcionário não fosse um gerente, deixaríamos estes atributos vazios.</p><p>Essa é uma possibilidade, porém podemos começar a ter muito atributos opcionais, e a classe ficaria estranha. E em relação aos métodos? A classe Gerente tem o método autentica, que não faz sentido existir em um funcionário que não é gerente</p></div><p>Se tivéssemos um outro tipo de funcionário que tem características diferentes do funcionário comum, precisaríamos criar uma outra classe e copiar o código novamente!</p><p>Além disso, se um dia precisarmos adicionar uma nova informação para todos os funcionários, precisaremos passar por todas as classes de funcionário e adicionar esse atributo. O problema acontece novamente por não centralizarmos as informações principais do funcionário em um único lugar!</p><p>Existe um jeito, em Java, de relacionarmos uma classe de tal maneira que uma delas <strong>herda</strong> tudo que a outra tem. Isto é uma relação de classe mãe e classe filha. No nosso caso, gostaríamos de fazer com que o <code>Gerente</code> tivesse tudo que um <code>Funcionario</code> tem, gostaríamos que ela fosse uma <strong>extensão</strong> de <code>Funcionario</code>. Fazemos isto através da palavra chave <code>extends</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">autentica</span><span class="token punctuation">(</span><span class="token keyword">int</span> senha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>senha <span class="token operator">==</span> senha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Acesso Permitido!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Acesso Negado!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// setter da senha omitido</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Em todo momento que criarmos um objeto do tipo Gerente, este objeto possuirá também os atributos definidos na classe Funcionario, pois um Gerente <strong>é um</strong> Funcionario:</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iznAyv8py_CIYpBp5MngT7KLt5EBKlDAKhaSKlDIm4eXD000" alt="uml diagram"><figcaption>Herança entre Funcionario e Gerente.</figcaption></figure><figure><img src="https://www.plantuml.com/plantuml/svg/PP1DJiGm38NtFeNLsS0LO5C9D5oY6oTzb8nSfygFG4Az-vIMbagiyYdn-_BaDXT9fOvAxKxyae9O7xcE7DqD9RBmjBo5nBrmhiwhv0mY5GVbnl39RqYmWeV7XYZ15x51mStlTSENIHH30knPW-5fmuAlik7tBikm3-dCweWKNt6jvaCqII7cLUQ3z35t9hKivk1b-V9i_rEUUvmqoxHey71QiNLPQStzqD74ueZE_FJUMHRz5pq2p4mppKpKmlfrbTjv1m00" alt="uml diagram"><figcaption>Criando um objeto a partir da subclasse.</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TestaGerente</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Gerente</span> gerente <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// podemos chamar métodos do Funcionario:</span>
        gerente<span class="token punctuation">.</span><span class="token function">setNome</span><span class="token punctuation">(</span><span class="token string">&quot;João da Silva&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// e também métodos do Gerente!</span>
        gerente<span class="token punctuation">.</span><span class="token function">setSenha</span><span class="token punctuation">(</span><span class="token number">4231</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dizemos que a classe <code>Gerente</code> <strong>herda</strong> todos os atributos e métodos da classe mãe, no nosso caso, a <code>Funcionario</code>. Para ser mais preciso, ela também herda os atributos e métodos privados, porém não consegue acessá-los diretamente. Para acessar um membro privado na filha indiretamente, seria necessário que a mãe expusesse um outro método visível que invocasse esse atributo ou método privado.</p><div class="hint-container tip"><p class="hint-container-title">Super e Sub classe</p><p>A nomenclatura mais encontrada é que <code>Funcionario</code> é a superclasse de <code>Gerente</code>, e <code>Gerente</code> é a subclasse de <code>Funcionario</code>. Dizemos também que todo <code>Gerente</code> <strong>é um</strong> <code>Funcionario</code>. Outra forma é dizer que <code>Funcionario</code> é classe mãe de <code>Gerente</code> e <code>Gerente</code> é classe filha de <code>Funcionario</code>.</p></div><p>E se precisamos acessar os atributos que herdamos? Não gostaríamos de deixar os atributos de <code>Funcionario</code> <strong>public</strong>, pois dessa maneira qualquer um poderia alterar os atributos dos objetos deste tipo. Existe um outro modificador de acesso, o <strong>protected</strong>, que fica entre o <strong>private</strong> e o <strong>public</strong>. Um atributo <strong>protected</strong> só pode ser acessado (visível) pela própria classe e por suas subclasses (e mais algumas outras classes, mas veremos isso mais adiante).</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> cpf<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token comment">// métodos devem vir aqui</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Sempre usar protected?</p><p>Então porque usar private? Depois de um tempo programando orientado a objetos, você vai começar a sentir que nem sempre é uma boa ideia deixar que a classe filha acesse os atributos da classe mãe, pois isso quebra um pouco a ideia de que só aquela classe deveria manipular seus atributos. Essa é uma discussão um pouco mais avançada.</p><p>Além disso, não só as subclasses, mas também as outras classes, podem acessar os atributos protected, que veremos mais a frente (mesmo pacote).</p></div><p>Da mesma maneira, podemos ter uma classe <code>Diretor</code> que estenda <code>Gerente</code> e a classe <code>Presidente</code> pode estender diretamente de <code>Funcionario</code>.</p><p>Fique claro que essa é uma decisão de negócio. Se <code>Diretor</code> vai estender de <code>Gerente</code> ou não, vai depender se, para você, <code>Diretor</code> <strong>é um</strong> <code>Gerente</code>.</p><p>Uma classe pode ter várias filhas, mas pode ter apenas uma mãe, é a chamada herança simples do java.</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iznAyv8py_CIYpBp5MngT7KLNFFIK_CoKZEByZ7bWbEJYr9BG7nCEVVKejIyabGkA0qHTCa4giyluk9oICrB0LiCeG40" alt="uml diagram"><figcaption>Herança de Diretor, Engenheiro, Secretario, Gerente com Funcionario</figcaption></figure><h3 id="k19" tabindex="-1"><a class="header-anchor" href="#k19" aria-hidden="true">#</a> K19</h3><p><sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></p><h4 id="reutilizacao-de-codigo" tabindex="-1"><a class="header-anchor" href="#reutilizacao-de-codigo" aria-hidden="true">#</a> Reutilização de Código</h4><p>Um banco oferece diversos serviços que podem ser contratados individualmente pelos clientes. Quando um serviço é contratado, o sistema do banco deve registrar quem foi o cliente que contratou o serviço, quem foi o funcionário responsável pelo atendimento ao cliente e a data de contratação.</p><p>Com o intuito de ser produtivo, a modelagem dos serviços do banco deve diminuir a repetição de código. A ideia é reaproveitar o máximo do código já criado. Essa ideia está diretamente relacionada ao conceito Don’t Repeat Yourself. Em outras palavras, devemos minimizar ao máximo a utilização do &quot;copiar e colar&quot;. O aumento da produtividade e a diminuição do custo de manutenção são as principais motivações do DRY.</p><p>Em seguida, vamos discutir algumas modelagens possíveis para os serviços do banco. Buscaremos seguir a ideia do DRY na criação dessas modelagens.</p><h4 id="uma-classe-para-todos-os-servicos" tabindex="-1"><a class="header-anchor" href="#uma-classe-para-todos-os-servicos" aria-hidden="true">#</a> Uma classe para todos os serviços</h4><p>Poderíamos definir apenas uma classe para modelar todos os tipos de serviços que o banco oferece.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao <span class="token punctuation">;</span>
    <span class="token comment">// métodos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="emprestimo" tabindex="-1"><a class="header-anchor" href="#emprestimo" aria-hidden="true">#</a> Empréstimo</h5><p>O empréstimo é um dos serviços que o banco oferece. Quando um cliente contrata esse serviço, são definidos o valor e a taxa de juros mensal do empréstimo. Devemos acrescentar dois atributos na classe <code>Servico</code>: um para o valor e outro para a taxa de juros do serviço de empréstimo.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// GERAL</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao<span class="token punctuation">;</span>
    <span class="token comment">// EMPRÉSTIMO</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> taxa<span class="token punctuation">;</span>
    <span class="token comment">// métodos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="seguro-de-veiculos" tabindex="-1"><a class="header-anchor" href="#seguro-de-veiculos" aria-hidden="true">#</a> Seguro de veículos</h5><p>Outro serviço oferecido pelo banco é o seguro de veículos. Para esse serviço devem ser definidas as seguintes informações: veículo segurado, valor do seguro e a franquia. Devemos adicionar três atributos na classe <code>Servico</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// GERAL</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao <span class="token punctuation">;</span>
    <span class="token comment">// EMPRÉSTIMO</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valor <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> taxa <span class="token punctuation">;</span>
    <span class="token comment">// SEGURO DE VEICULO</span>
    <span class="token keyword">private</span> <span class="token class-name">Veiculo</span> veiculo <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valorDoSeguroDeVeiculo <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> franquia <span class="token punctuation">;</span>
    <span class="token comment">// métodos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Apesar de seguir a ideia do DRY, modelar todos os serviços com apenas uma classe pode dificultar o desenvolvimento. Supondo que dois ou mais desenvolvedores são responsáveis pela implementação dos serviços, eles provavelmente modificariam a mesma classe concorrentemente. Além disso, os desenvolvedores, principalmente os recém chegados no projeto do banco, ficariam confusos com o código extenso da classe <code>Servico</code>.</p><p>Outro problema é que um objeto da classe <code>Servico</code> possui atributos para todos os serviços que o banco oferece. Na verdade, ele deveria possuir apenas os atributos relacionados a um serviço. Do ponto de vista de performance, essa abordagem causaria um consumo desnecessário de memória.</p><h4 id="uma-classe-para-cada-servico" tabindex="-1"><a class="header-anchor" href="#uma-classe-para-cada-servico" aria-hidden="true">#</a> Uma classe para cada serviço</h4><p>Para modelar melhor os serviços, evitando uma quantidade grande de atributos e métodos desnecessários, criaremos uma classe para cada serviço.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SeguroDeVeiculo</span> <span class="token punctuation">{</span>
    <span class="token comment">// GERAL</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao <span class="token punctuation">;</span>
    <span class="token comment">// SEGURO DE VEICULO</span>
    <span class="token keyword">private</span> <span class="token class-name">Veiculo</span> veiculo <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valorDoSeguroDeVeiculo <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> franquia <span class="token punctuation">;</span>
    <span class="token comment">// métodos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token punctuation">{</span>
    <span class="token comment">// GERAL</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao <span class="token punctuation">;</span>
    <span class="token comment">// EMPRÉSTIMO</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valor <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> taxa <span class="token punctuation">;</span>
    <span class="token comment">// métodos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Criar uma classe para cada serviço torna o sistema mais flexível, pois qualquer alteração em um determinado serviço não causará efeitos colaterais nos outros. Mas, por outro lado, essas classes teriam bastante código repetido, contrariando a ideia do DRY. Além disso, qualquer alteração que deva ser realizada em todos os serviços precisa ser implementada em cada uma das classes.</p><h4 id="uma-classe-generica-e-varias-especificas" tabindex="-1"><a class="header-anchor" href="#uma-classe-generica-e-varias-especificas" aria-hidden="true">#</a> Uma classe genérica e várias específicas</h4><p>Na modelagem dos serviços do banco, podemos aplicar um conceito de orientação a objetos chamado Herança. A ideia é reutilizar o código de uma determinada classe em outras classes.</p><p>Aplicando herança, teríamos a classe <code>Servico</code> com os atributos e métodos que todos os serviços devem ter e uma classe para cada serviço com os atributos e métodos específicos do determinado serviço.</p><p>As classes específicas seriam &quot;ligadas&quot; de alguma forma à classe <code>Servico</code> para reaproveitar o código nela definido. Esse relacionamento entre as classes é representado em UML pelo diagrama abaixo</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iu9JYyeoa_CLR6fqTHM2KzDBY_9TKiDICvDBS_9H9Lrp2ufIYqioS_Ev75BpKi36G6W0" alt="uml diagram"><figcaption>Árvore de herança dos serviços</figcaption></figure><p>Os objetos das classes específicas <code>Emprestimo</code> e <code>SeguroDeVeiculo</code> possuiriam tanto os atributos e métodos definidos nessas classes quanto os definidos na classe <code>Servico</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Emprestimo</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emprestimo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token comment">// Chamando um método da classe Servico</span>
e<span class="token punctuation">.</span><span class="token function">setDataDeContratacao</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token class-name">Month</span><span class="token punctuation">.</span><span class="token constant">JANUARY</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token comment">// Chamando um método da classe Emprestimo</span>
e<span class="token punctuation">.</span><span class="token function">setValor</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As classes específicas são vinculadas a classe genérica utilizando o comando extends. Não é necessário redefinir o conteúdo já declarado na classe genérica.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Cliente</span> contratante<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Funcionario</span> responsavel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> dataDeContratacao<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> taxa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SeguroDeVeiculo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Veiculo</span> veiculo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> valorDoSeguroDeVeiculo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> franquia<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A classe genérica é denominada super classe, classe base ou classe mãe. As classes específicas são denominadas sub classes, classes derivadas ou classes filhas.</p><p>Quando o operador <code>new</code> é aplicado em uma sub classe, o objeto construído possuirá os atributos e métodos definidos na sub classe e na super classe.</p><figure><img src="https://www.plantuml.com/plantuml/svg/LP0nRiCm34Ltde9mb_OAxM8WxGcwUg7bZq05JHaKxGOeSlSwTfCqanxq-Py4jZN4OnwLsYlnmRFOK7WUkVHVYCB2qvfbvq6updrIgHL4AZsK6yCtVuoJeqOUo_DBG-H88NPKS7DF6dwQH75qmDuq6rvt39nYnv-hSX4jtbd8IHvQzz7_Jtp2bvmkVj6SqEkCtR_HrhdGpPwAXSlQ3dIsVcugLcM1TZQij-yu_EL97fqt4pFJcSvCrCA6RNlx-Gi0" alt="uml diagram"><figcaption>Criando um objeto a partir da subclasse.</figcaption></figure><h2 id="sobrecrita-de-metodos" tabindex="-1"><a class="header-anchor" href="#sobrecrita-de-metodos" aria-hidden="true">#</a> Sobrecrita de Métodos</h2><h3 id="caelum-1" tabindex="-1"><a class="header-anchor" href="#caelum-1" aria-hidden="true">#</a> Caelum</h3><p><sup class="footnote-ref"><a href="#footnote2">[2:1]</a><a class="footnote-anchor" id="footnote-ref2:1"></a></sup></p><p>Todo fim de ano, os funcionários do nosso banco recebem uma bonificação. Os funcionários comuns recebem 10% do valor do salário e os gerentes, 15%.</p><p>Vamos ver como fica a classe Funcionario:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> cpf<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">0.10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// métodos</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Se deixarmos a classe <code>Gerente</code> como ela está, ela vai herdar o método <code>getBonificacao</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Gerente</span> gerente <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gerente<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gerente<span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O resultado aqui será <code>500</code>. Não queremos essa resposta, pois o gerente deveria ter <code>750</code> de bônus nesse caso. Para consertar isso, uma das opções seria criar um novo método na classe Gerente, chamado, por exemplo, <code>getBonificacaoDoGerente</code>. O problema é que teríamos dois métodos em Gerente, confundindo bastante quem for usar essa classe, além de que cada um da uma resposta diferente.</p><p>No Java, quando herdamos um método, podemos alterar seu comportamento. Podemos reescrever (reescrever, sobrescrever, override) este método:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Agora o método está correto para o <code>Gerente</code>. Refaça o teste e veja que o valor impresso é o correto <code>750</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Gerente</span> gerente <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gerente<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gerente<span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">A anotação @Override</p><p>Há como deixar explícito no seu código que determinador método é a reescrita de um método da sua classe mãe. Fazemos isso colocando <code>@Override</code> em cima do método. Isso é chamado <strong>anotação</strong>. Existem diversas anotações e cada uma vai ter um efeito diferente sobre seu código.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba que, por questões de compatibilidade, isso não é obrigatório. Mas caso um método esteja anotado com <code>@Override</code>, ele necessariamente precisa estar reescrevendo um método da classe mãe.</p></div><h4 id="invocando-o-metodo-reescrito" tabindex="-1"><a class="header-anchor" href="#invocando-o-metodo-reescrito" aria-hidden="true">#</a> Invocando o método reescrito</h4><p>Depois de reescrito, não podemos mais chamar o método antigo que fora herdado da classe mãe: realmente alteramos o seu comportamento. Mas podemos invocá-lo no caso de estarmos dentro da classe.</p><p>Imagine que para calcular a bonificação de um Gerente devemos fazer igual ao cálculo de um <code>Funcionario</code> porem adicionando R$ 1000. Poderíamos fazer assim:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario <span class="token operator">*</span> <span class="token number">0.10</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Aqui teríamos um problema: o dia que o <code>getBonificacao</code> do <code>Funcionario</code> mudar, precisaremos mudar o método do <code>Gerente</code> para acompanhar a nova bonificação. Para evitar isso, o <code>getBonificacao</code> do <code>Gerente</code> pode chamar o do <code>Funcionario</code> utilizando a palavra chave <strong>super</strong>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> senha<span class="token punctuation">;</span>
    <span class="token keyword">int</span> numeroDeFuncionariosGerenciados<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Essa invocação vai procurar o método com o nome <code>getBonificacao</code> de uma super classe de <code>Gerente</code>. No caso ele logo vai encontrar esse método em <code>Funcionario</code>.</p><p>Essa é uma prática comum, pois muitos casos o método reescrito geralmente faz &quot;algo a mais&quot; que o método da classe mãe. Chamar ou não o método de cima é uma decisão sua e depende do seu problema. Algumas vezes não faz sentido invocar o método que reescrevemos.</p><h3 id="k19-1" tabindex="-1"><a class="header-anchor" href="#k19-1" aria-hidden="true">#</a> K19</h3><p><sup class="footnote-ref"><a href="#footnote3">[3:1]</a><a class="footnote-anchor" id="footnote-ref3:1"></a></sup></p><p>Suponha que o valor da taxa administrativa do serviço de empréstimo é diferente dos outros serviços, pois ele é calculado a partir do valor emprestado ao cliente. Como esta lógica é específica para o serviço de empréstimo, devemos acrescentar um método para implementar esse cálculo na classe <code>Emprestimo</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxaDeEmprestimo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valor <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para os objetos da classe <code>Emprestimo</code>, devemos chamar o método <code>calculaTaxaDeEmprestimo()</code>. Para todos os outros serviços, devemos chamar o método <code>calculaTaxa()</code>.</p><p>Mesmo assim, nada impediria que o método <code>calculaTaxa()</code> fosse chamado em um objeto da classe <code>Emprestimo</code>, pois ela herda esse método da classe <code>Servico</code>. Dessa forma, existe o risco de alguém erroneamente chamar o método incorreto.</p><p>Seria mais seguro &quot;substituir&quot; a implementação do método <code>calculaTaxa()</code> herdado da classe <code>Servico</code> na classe <code>Emprestimo</code>. Para isso, basta escrever o método <code>calculaTaxa()</code> também na classe <code>Emprestimo</code> com a mesma assinatura que ele possui na classe <code>Servico</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valor <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Os métodos das classes específicas têm prioridade sobre os métodos das classes genéricas. Em outras palavras, se o método chamado existe na classe filha ele será chamado, caso contrário o método será procurado na classe mãe.</p><p>Quando definimos um método com a mesma assinatura na classe base e em alguma classe derivada, estamos aplicando o conceito de Reescrita de Método.</p><h4 id="fixo-especifico" tabindex="-1"><a class="header-anchor" href="#fixo-especifico" aria-hidden="true">#</a> Fixo + Específico</h4><p>Suponha que o preço de um serviço é a soma de um valor fixo mais um valor que depende do tipo do serviço. Por exemplo, o preço do serviço de empréstimo é 5 reais mais uma porcentagem do valor emprestado ao cliente. O preço do serviço de seguro de veículo é 5 reais mais uma porcentagem do valor do veículo segurado. Em cada classe específica, podemos reescrever o método <code>calculaTaxa()</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valor <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SeguraDeVeiculo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
<span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>veiculo<span class="token punctuation">.</span><span class="token function">getTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token number">0.05</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Se o valor fixo dos serviços for atualizado, todas as classes específicas devem ser modificadas. Outra alternativa seria criar um método na classe <code>Servico</code> para calcular o valor fixo de todos os serviços e chamá-lo dos métodos reescritos nas classes específicas.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
<span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculaTaxa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valor <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dessa forma, quando o valor padrão do preço dos serviços é alterado, basta modificar o método na classe <code>Servico</code>.</p><h2 id="construtores-e-heranca" tabindex="-1"><a class="header-anchor" href="#construtores-e-heranca" aria-hidden="true">#</a> Construtores e Herança</h2><p>Quando temos uma hierarquia de classes, as chamadas dos construtores são mais complexas do que o normal. Pelo menos um construtor de cada classe de uma mesma sequência hierárquica deve ser chamado ao instanciar um objeto. Por exemplo, quando um objeto da classe Emprestimo é criado, pelo menos um construtor da própria classe Emprestimo e um da classe Servico devem ser executados. Além disso, os construtores das classes mais genéricas são chamados antes dos construtores das classes específicas.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token class-name">Servico</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Servico&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Emprestimo</span> <span class="token keyword">extends</span> <span class="token class-name">Servico</span> <span class="token punctuation">{</span>
    <span class="token comment">// ATRIBUTOS</span>
    <span class="token keyword">public</span> <span class="token class-name">Emprestimo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Emprestimo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Por padrão, todo construtor chama o construtor sem argumentos da classe mãe se não existir nenhuma chamada de construtor explícita.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TesteConstrutor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Emprestimo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><div class="multicolumn"><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iHIuWbEBoZAJynLiQdHr5Lnp2ufIYqioS_CLk1nIyrB0QY4q0000" alt="uml diagram"><img src="https://www.plantuml.com/plantuml/svg/RL112i903Bpd5Q4dFTW7ACY2-8A-ODsckD3Tb3HTzVUkrjAbUCfaCZC9CQDQqIdqO1Q4SFSjOSUiDtw2TSg2bzv79G0dP9Nm6WQXKNrWc2TuE1Sa7Z7IusFrQIC7A6JPr90axnX1g4DE90i3YCrhL0erJreFahVqSLVzfjN-11HRpAvDOD6jcSK1_sDNGPbiClZ-Pgvl" alt="uml diagram"></div><figcaption>Execução do construtor com Herança</figcaption></figure><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Referências</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Takenami, Igor. Introdução a Programação Orientada a Objetos. Salvador. 2011. (Apostila). <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>Caelum. Java e Orientação a Objetos - Curso fj-11. <a href="#footnote-ref2" class="footnote-backref">↩︎</a> <a href="#footnote-ref2:1" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>K19-Treinamentos. (2013). Orientação a Objetos em Java, 220. <a href="#footnote-ref3" class="footnote-backref">↩︎</a> <a href="#footnote-ref3:1" class="footnote-backref">↩︎</a></p></li></ol></section>`,125),c=[t];function i(p,l){return s(),n("div",null,c)}const u=a(o,[["render",i],["__file","11_Heranca.html.vue"]]);export{u as default};
