import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as o,e as s}from"./app-023c24ab.js";const i={},t=s('<h1 id="exercicio-de-heranca-3" tabindex="-1"><a class="header-anchor" href="#exercicio-de-heranca-3" aria-hidden="true">#</a> Exercício de Herança 3</h1><ol><li>Verdadeiro ou Falso, se falso justifique. <ul><li>[ ] Em orientação a objetos herança é a capacidade de uma classe definir o seu comportamento e sua estrutura aproveitando definições de outra classe, normalmente conhecida como classe base ou classe pai.</li><li>[ ] O objetivo da herança é generalizar o entendimento de uma classe criando novas características e comportamentos que vão além da superclasse.</li><li>[ ] Classes concretas são classes que não produzem instâncias. Elas agrupam características e comportamentos que serão herdados por outras classes.</li><li>[ ] Classes abstratas precisam ter métodos com implementação definida.</li><li>[ ] Os métodos abstratos são obrigatoriamente implementados pelas classes filhas.</li><li>[ ] Polimorfismo só pode ser utilizando com herança, não podendo ser aplicado a interface.</li><li>[ ] As interfaces são estritamente modelos de comportamento.</li><li>[ ] As interfaces não podem ser instanciadas pois não produzem objetos.</li><li>[ ] As interfaces podem ter atributos de instância.</li><li>[ ] Classes abstratas podem ter atributos de instância.</li><li>[ ] As interfaces não podem ter métodos com corpo definido.</li><li>[ ] Classes abstratas não podem ter métodos com corpo definido.</li></ul></li></ol>',2),r=[t];function c(n,l){return a(),o("div",null,r)}const p=e(i,[["render",c],["__file","Heranca3.html.vue"]]);export{p as default};
