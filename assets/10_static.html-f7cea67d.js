import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,e}from"./app-32acd303.js";const i={},o=e(`<h1 id="membros-de-instancia-e-membros-de-classes" tabindex="-1"><a class="header-anchor" href="#membros-de-instancia-e-membros-de-classes" aria-hidden="true">#</a> Membros de instância e Membros de classes</h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><ul><li>Variáveis de Classe <ul><li>Quando um número de objetos são criados a partir de uma mesma classe, cada um tem suas próprias cópias distintas de variáveis de instância.</li><li>No caso de a classe de bicicleta, são as variáveis de instância engrenagem e velocidade. Cada objeto de bicicleta tem seus próprios valores para essas variáveis, armazenadas em diferentes locais de memória.</li></ul></li><li>Às vezes, é necessário ter variáveis que são comuns a todos os objetos.</li><li>Isto é conseguido com o modificador <code>static</code>.</li><li>Os campos que têm o modificador <code>static</code> em sua declaração são chamados de <strong>campos estáticos ou variáveis de classe.</strong></li><li>Eles estão associados com a classe. Cada instância compartilha uma variável de classe, que está em um local fixo na memória.</li><li>Qualquer objeto pode alterar o valor de uma variável de classe, mas variáveis de classe também pode ser manipulado sem criar uma instância da classe. <ul><li>exemplo: <ul><li>Caso seja necessário criar um número de objetos de bicicleta e atribuir a cada um número de série, começando com 1 para o primeiro objeto.</li><li>Esse número de identificação é única para cada objeto e é, portanto, uma variável de instância.</li><li>Ao mesmo tempo, você precisa de um campo para manter o controle de quantos objetos bicicletas foram criadas para que você saiba o ID para atribuir ao próximo.</li><li>Esse campo não está relacionada a qualquer objeto individual, mas para a classe como um todo.</li><li>Para isso, você precisa de uma variável de classe, numeroDeBicicletas:</li></ul></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bicicleta</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> engrenagem<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> velocidade<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numeroDeBicicletas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Variáveis de classe são referenciados pelo próprio nome da classe:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Bicicleta</span><span class="token punctuation">.</span>numeroDeBicicletas
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Também é possível consultar a campos estáticos com uma referência de objeto como:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Bicicleta</span> minhaBicicleta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
minhaBicicleta<span class="token punctuation">.</span>numeroDeBicicletas<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>mas isso não deixa claro que é um atributo de classe e não de instancia, é recomendado que sempre que for acessar um atributo de classe acessar pela classe.</p></li><li><p>No construtor da Bicicleta pode ser setado o valor do atributo ID incrementar a variável de classe numeroDeBicicletas:</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bicicleta</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numeroDeBicicletas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span>numeroDeBicicletas<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Bicicleta</span> bicicleta1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      bicicleta1<span class="token punctuation">.</span><span class="token function">setVelocidade</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Bicicleta</span> bicicleta2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      bicicleta2<span class="token punctuation">.</span><span class="token function">setVelocidade</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/bP513e8m44NtFKM36rt24ZV4U0mtG_j3cWp5j4LD39VnAbvCR0F2mXXdCt_p_fjaAX_8XRvbKKr92i5KWsLcSPK7eunY1DhkCY4SL23RC6IccBn79ZTdOZGEi7is5cMA0RUGubt8SQR6leNhZfXRVLciAZvSn1O-OtruFgmob8y4iL6ekKUInXJPTqhAXTReCZ_P2xXJHfD6kQwOmP68wF1T7k_zsrwixCKl-p3-e8BLyIzflm00" alt="uml diagram"><figcaption>Atributos de classe e de instância.</figcaption></figure><h2 id="metodos-estaticos" tabindex="-1"><a class="header-anchor" href="#metodos-estaticos" aria-hidden="true">#</a> Métodos estáticos</h2><ul><li>A linguagem de programação Java suporta métodos estáticos, bem como variáveis estáticas.</li><li>Os métodos estáticos, que têm o modificador static em suas declarações, deve ser chamado com o nome da classe, sem a necessidade de criação de uma instância da classe</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassName</span><span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Um uso comum para métodos estáticos é acessar campos estáticos. Por exemplo, nós poderíamos adicionar um método estático para a classe de bicicleta para acessar o campo estático numeroDeBicicletas:</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bicicleta</span> <span class="token punctuation">{</span>
  <span class="token comment">//... </span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numeroDeBicicletas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span>numeroDeBicicletas<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getNumeroDeBicicletas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> numeroDeBicicletas<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Nem todas as combinações de variáveis e métodos de classe e de instância são permitidas: <ul><li>Métodos de instância podem acessar variáveis de instância e métodos de instância diretamente.</li><li>Métodos de instância podem acessar variáveis de classe e métodos de classe diretamente.</li><li>Métodos de classe podem acessar variáveis de classe e métodos de classe diretamente.</li><li>Métodos de classe não podem acessar variáveis de instância ou métodos de instância diretamente, eles devem usar uma referência de objeto. Além disso, métodos de classe não pode usar a palavra-chave <code>this</code>.</li></ul></li></ul><h2 id="constantes" tabindex="-1"><a class="header-anchor" href="#constantes" aria-hidden="true">#</a> Constantes</h2><ul><li>O modificador <em>static,</em> em combinação com o modificador <em>final,</em> é também usado para definir constantes.</li><li>O modificador <em>final</em> indica que o valor deste campo não pode mudar.</li></ul><h3 id="static-final" tabindex="-1"><a class="header-anchor" href="#static-final" aria-hidden="true">#</a> Static final</h3><ul><li>Por exemplo, a seguinte declaração variável define uma constante chamada PI, cujo valor é uma aproximação do pi</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.141592653589793</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Constantes definidas desta forma não pode ser alteradas, um erro de compilação ocorrerá caso seu programa tenta fazer isso.</li><li>Por convenção, os nomes das constantes estão escritas em letras maiúsculas.</li><li>Se o nome for composto por mais de uma palavra, as palavras são separadas por um sublinhado (_).</li></ul><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Referências</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Takenami, Igor. Introdução a Programação Orientada a Objetos. Salvador. 2011. (Apostila). <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,23),t=[o];function c(l,p){return s(),n("div",null,t)}const u=a(i,[["render",c],["__file","10_static.html.vue"]]);export{u as default};
