import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c,a as n,b as p,d as i,e as s}from"./app-b38b2eda.js";const l={},r=s(`<h1 id="exercicio-polimorfismo" tabindex="-1"><a class="header-anchor" href="#exercicio-polimorfismo" aria-hidden="true">#</a> Exercício Polimorfismo</h1><p>adapitado de <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><ol><li>Criar uma classe abstrata chamada <code>Operacao</code> com o atributo valor do tipo double e um método abstrato chamado <code>operar()</code> que retornará um valor do tipo double.</li><li>Crie uma classe <code>Debito</code> e outra <code>Credito</code> que herda as caraterísticas de <code>Operacao.</code> O construtor de <code>Debito</code> e <code>Credito</code> deve receber o valor da operação e atribuir este valor a variável definida em <code>Operacao</code> (superclasse). Estas classes (<code>Debito</code> e <code>Credito</code>) devem ter um método <code>operar()</code> que deve ser programado de acordo com sua finalidade: <code>operar()</code> da classe <code>Debito</code> retorna o valor negativo pois a operação deve ser um debito enquanto a o método <code>operar()</code> de <code>Credito</code> retorna o valor positivo.</li><li>Criar a classe <code>Conta</code> com o atributo saldo do tipo <code>double</code> que inicia com 0. Esta classe possui um método <code>executarOperacao(Operacao opr)</code> que recebe um parâmetro do tipo <code>Operacao</code> que vai operar o saldo da conta correte (se for debito diminui, se for credito soma). Esta classe também possui o método <code>getSaldo()</code> que retorna o saldo do saldo atual.</li><li>Crie a classe <code>Correntista</code> com os seguintes atributos: <code>nome</code> (do tipo String) e <code>conta</code> (do tipo <code>Conta</code>). O construtor de <code>Correntista</code> deve receber seu nome. A classe deve ter 2 métodos: <code>public String getNome()</code> e <code>public Conta getConta().</code> Estes métodos retornam o nome e a conta respectivamente.</li><li>Crie a classe <code>Banco</code> como descrito no código abaixo:<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Banco</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Correntista</span><span class="token punctuation">&gt;</span></span> correntistas<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> qtdCorrentista<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">Banco</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>correntistas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>qtdCorrentista <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorrentista</span><span class="token punctuation">(</span><span class="token class-name">String</span> nome<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Correntista</span> <span class="token function">getCorrentista</span><span class="token punctuation">(</span><span class="token class-name">String</span> nome<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">debitar</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomeCorrentista<span class="token punctuation">,</span> <span class="token keyword">double</span> valor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Debito</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Debito</span><span class="token punctuation">(</span>valor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getCorrentista</span><span class="token punctuation">(</span>nomeCorrentista<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executarOperacao</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">creditar</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomeCorrentista<span class="token punctuation">,</span> <span class="token keyword">double</span> valor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Credito</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Credito</span><span class="token punctuation">(</span>valor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getCorrentista</span><span class="token punctuation">(</span>nomeCorrentista<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executarOperacao</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSaldo</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomeCorrentista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getCorrentista</span><span class="token punctuation">(</span>nomeCorrentista<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSaldo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferir</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomeCorrentistaOrigem<span class="token punctuation">,</span> <span class="token class-name">String</span> nomeCorrentistaDestino<span class="token punctuation">,</span> <span class="token keyword">double</span> valor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">debitar</span><span class="token punctuation">(</span>nomeCorrentistaOrigem<span class="token punctuation">,</span> valor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">creditar</span><span class="token punctuation">(</span>nomeCorrentistaDestino<span class="token punctuation">,</span> valor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Modifique o método <code>transferir</code> da classe <code>Banco</code> para utilizar uma classe <code>Transferir</code> que herde de <code>Operacao</code>:</li></ol><h2 id="entrega" tabindex="-1"><a class="header-anchor" href="#entrega" aria-hidden="true">#</a> Entrega</h2>`,4),u={href:"https://classroom.github.com/a/mHmMBgPi",target:"_blank",rel:"noopener noreferrer"},d=s('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Takenami, Igor. Introdução a Programação Orientada a Objetos. Salvador. 2011. (Apostila). <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',2);function k(m,v){const a=e("ExternalLinkIcon");return t(),c("div",null,[r,n("p",null,[n("a",u,[p("link"),i(a)])]),d])}const g=o(l,[["render",k],["__file","Polimorfismo1.html.vue"]]);export{g as default};
