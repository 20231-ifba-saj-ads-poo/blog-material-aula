import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as u,c as r,d as s,w as t,a,b as n,e as o,r as p}from"./app.98a9f119.js";const d={},m=o(`<h1 id="codificando-com-java" tabindex="-1"><a class="header-anchor" href="#codificando-com-java" aria-hidden="true">#</a> Codificando com JAVA</h1><p>Em geral, as linguagens de programa\xE7\xE3o possuem conven\xE7\xF5es <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> para definir os nomes das vari\xE1veis. Essas conven\xE7\xF5es ajudam o desenvolvimento de um c\xF3digo mais leg\xEDvel.</p><p>Na conven\xE7\xE3o de nomes da linguagem Java, os nomes das vari\xE1veis devem seguir o padr\xE3o <strong>camel case</strong> com a primeira letra min\xFAscula <strong>(lower camel case).</strong> Veja alguns exemplos:</p><ul><li>nomeDoCliente</li><li>numeroDeAprovados</li></ul><h2 id="declarando-e-usando-variaveis" tabindex="-1"><a class="header-anchor" href="#declarando-e-usando-variaveis" aria-hidden="true">#</a> Declarando e usando vari\xE1veis</h2><p>Dentro de um bloco, podemos declarar vari\xE1veis e us\xE1-las. Em Java, toda vari\xE1vel tem um tipo que n\xE3o pode ser mudado, uma vez que declarado:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>tipoDaVariavel nomeDaVariavel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Por exemplo, \xE9 poss\xEDvel ter uma idade que guarda um n\xFAmero inteiro:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Com isso, voc\xEA declara a vari\xE1vel idade, que passa a existir a partir daquela linha. Ela \xE9 do tipo int, que guarda um n\xFAmero inteiro. A partir da\xED, voc\xEA pode us\xE1-la, primeiramente atribuindo valores.</p><p>A linha a seguir \xE9 a tradu\xE7\xE3o de: &quot;idade deve valer quinze\u201D.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Al\xE9m de atribuir, voc\xEA pode utilizar esse valor. O c\xF3digo a seguir declara novamente a vari\xE1vel idade com valor 15 e imprime seu valor na sa\xEDda padr\xE3o atrav\xE9s da chamada a System.out.println.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// declara a idade</span>
<span class="token keyword">int</span> idade<span class="token punctuation">;</span>
idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

<span class="token comment">// imprime a idade</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>idade<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Por fim, podemos utilizar o valor de uma vari\xE1vel para algum outro prop\xF3sito, como alterar ou definir uma segunda vari\xE1vel. O c\xF3digo a seguir cria uma vari\xE1vel chamada idadeNoAnoQueVem com valor de idade <strong>mais um.</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// calcula a idade no ano seguinte</span>
<span class="token keyword">int</span> idadeNoAnoQueVem<span class="token punctuation">;</span>
idadeNoAnoQueVem <span class="token operator">=</span> idade <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No mesmo momento que voc\xEA declara uma vari\xE1vel, tamb\xE9m \xE9 poss\xEDvel inicializ\xE1-la por praticidade:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18),k=a("p",null,[n("Voc\xEA pode usar os operadores "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"+")]),a("annotation",{encoding:"application/x-tex"},"+")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"+")])])]),n(", "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"\u2212")]),a("annotation",{encoding:"application/x-tex"},"-")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"\u2212")])])]),n(", "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"/")]),a("annotation",{encoding:"application/x-tex"},"/")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"/")])])]),n(" e "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"\u2217")]),a("annotation",{encoding:"application/x-tex"},"*")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4653em"}}),a("span",{class:"mord"},"\u2217")])])]),n(" para operar com n\xFAmeros, sendo eles respons\xE1veis pela adi\xE7\xE3o, subtra\xE7\xE3o, divis\xE3o e multiplica\xE7\xE3o, respectivamente. Al\xE9m desses operadores b\xE1sicos, h\xE1 o operador % (m\xF3dulo) que nada mais \xE9 que o "),a("strong",null,"resto de uma divis\xE3o inteira."),n(" Veja alguns exemplos:")],-1),v=o(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> quatro <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tres <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> oito <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> dezesseis <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> um <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 5 dividido por 2 d\xE1 2 e tem resto 1;</span>
                <span class="token comment">// o operador % pega o resto da divis\xE3o inteira</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Representar n\xFAmeros inteiros \xE9 f\xE1cil, mas como guardar valores reais, tais como fra\xE7\xF5es de n\xFAmeros inteiros e outros? Outro tipo de vari\xE1vel muito utilizado \xE9 o double, que armazena um n\xFAmero com ponto flutuante (e que tamb\xE9m pode armazenar um n\xFAmero inteiro).</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>O tipo boolean armazena um valor verdadeiro ou falso, e s\xF3: nada de n\xFAmeros, palavras ou endere\xE7os, como em algumas outras linguagens.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">boolean</span> verdade <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>true</code> e <code>false</code> s\xE3o palavras reservadas do Java. \xC9 comum que um boolean seja determinado atrav\xE9s de uma express\xE3o booleana, isto \xE9, um trecho de c\xF3digo que retorna um booleano, como o exemplo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> menorDeIdade <span class="token operator">=</span> idade <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>O tipo <code>char</code> guarda um, e apenas um, caractere. Esse caractere deve estar entre aspas simples. N\xE3o se esque\xE7a dessas duas caracter\xEDsticas de uma vari\xE1vel do tipo <code>char</code>! Por exemplo, ela n\xE3o pode guardar um c\xF3digo como &quot; pois o vazio n\xE3o \xE9 um caractere!</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">char</span> letra <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>letra<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Vari\xE1veis do tipo <code>char</code> s\xE3o pouco usadas no dia a dia Veremos mais a frente o uso das Strings, que usamos constantemente, por\xE9m estas n\xE3o s\xE3o definidas por um tipo primitivo.</p><h2 id="tipos-primitivos-e-valores" tabindex="-1"><a class="header-anchor" href="#tipos-primitivos-e-valores" aria-hidden="true">#</a> Tipos primitivos e valores</h2><p>Esses tipos de vari\xE1veis s\xE3o tipos primitivos do Java: o valor que elas guardam s\xE3o o real conte\xFAdo da vari\xE1vel. Quando voc\xEA utilizar o operador de atribui\xE7\xE3o <code>=</code> o valor ser\xE1 copiado.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// i recebe uma c\xF3pia do valor 5</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// j recebe uma c\xF3pia do valor de i</span>
i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// i vira 6, j continua 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Aqui, <code>i</code> fica com o valor de <code>6</code>. Mas e <code>j</code>? Na segunda linha, <code>j</code> est\xE1 valendo <code>5</code>. Quando <code>i</code> passa a valer <code>6</code>, ser\xE1 que <code>j</code> tamb\xE9m muda de valor? N\xE3o, pois o valor de um tipo primitivo sempre \xE9 copiado.</p><p>Apesar da linha <code>2</code> fazer <code>j = i</code>, a partir desse momento essas vari\xE1veis n\xE3o tem rela\xE7\xE3o nenhuma: o que acontece com uma, n\xE3o repete em nada com a outra</p><h2 id="o-if-e-o-else" tabindex="-1"><a class="header-anchor" href="#o-if-e-o-else" aria-hidden="true">#</a> O if e o else</h2><p>A sintaxe do if no Java \xE9 a seguinte:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condicaoBooleana<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    codigo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Uma <strong>condi\xE7\xE3o booleana</strong> \xE9 qualquer express\xE3o que retorne <code>true</code> ou <code>false</code>. Para isso, voc\xEA pode usar os operadores <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> e outros. Um exemplo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;N\xE3o pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Al\xE9m disso, voc\xEA pode usar a cl\xE1usula else para indicar o comportamento que deve ser executado no caso da express\xE3o booleana ser falsa:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;N\xE3o pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Voc\xEA pode concatenar express\xF5es booleanas atrav\xE9s dos operadores l\xF3gicos &quot;E&quot; e &quot;OU&quot;. O &quot;E&quot; \xE9 representado pelo <code>&amp;&amp;</code> e o &quot;OU&quot; \xE9 representado pelo <code>||</code>.</p><p>Um exemplo seria verificar se ele tem menos de 18 anos e se ele n\xE3o \xE9 amigo do dono:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> amigoDoDono <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> amigoDoDono <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;N\xE3o pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Esse c\xF3digo poderia ficar ainda mais leg\xEDvel, utilizando-se o operador de nega\xE7\xE3o, o <code>!</code>. Esse operador transforma o resultado de uma express\xE3o <code>booleana</code> de <code>false</code> para <code>true</code> e vice versa.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> amigoDoDono <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>amigoDoDono<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;N\xE3o pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pode entrar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba na linha 3 que o trecho <code>amigoDoDono == false</code> virou <code>!amigoDoDono</code>. Eles t\xEAm o mesmo valor.</p><p>Para comparar se uma vari\xE1vel tem o mesmo valor que outra vari\xE1vel ou valor, utilizamos o operador <code>==</code>. Perceba que utilizar o operador <code>=</code> dentro de um <code>if</code> vai retornar um erro de compila\xE7\xE3o, j\xE1 que o operador <code>=</code> \xE9 o de atribui\xE7\xE3o.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> mes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>mes <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Voc\xEA deveria estar de f\xE9rias&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loops" tabindex="-1"><a class="header-anchor" href="#loops" aria-hidden="true">#</a> Loops</h2><h3 id="o-while" tabindex="-1"><a class="header-anchor" href="#o-while" aria-hidden="true">#</a> O While</h3><p>O while \xE9 um comando usado para fazer um la\xE7o (loop), isto \xE9, repetir um trecho de c\xF3digo algumas vezes. A ideia \xE9 que esse trecho de c\xF3digo seja repetido enquanto uma determinada condi\xE7\xE3o permanecer verdadeira.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>idade <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>idade<span class="token punctuation">)</span><span class="token punctuation">;</span>
    idade <span class="token operator">=</span> idade <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O trecho dentro do bloco do while ser\xE1 executado at\xE9 o momento em que a condi\xE7\xE3o <code>idade &lt; 18</code> passe a ser <code>falsa</code>. E isso ocorrer\xE1 exatamente no momento em que <code>idade == 18</code>, o que n\xE3o o far\xE1 imprimir <code>18</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>J\xE1 o while acima imprime de 0 a 9.</p><h3 id="o-for" tabindex="-1"><a class="header-anchor" href="#o-for" aria-hidden="true">#</a> O For</h3><p>Outro comando de loop extremamente utilizado \xE9 o for. A ideia \xE9 a mesma do while: fazer um trecho de c\xF3digo ser repetido enquanto uma condi\xE7\xE3o continuar verdadeira. Mas al\xE9m disso, o for isola tamb\xE9m um espa\xE7o para inicializa\xE7\xE3o de vari\xE1veis e o modificador dessas vari\xE1veis. Isso faz com que fiquem mais leg\xEDveis, as vari\xE1veis que s\xE3o relacionadas ao loop:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>inicializacao<span class="token punctuation">;</span> condicao<span class="token punctuation">;</span> incremento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    codigo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Um exemplo \xE9 o a seguir:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ol\xE1!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba que esse for poderia ser trocado por:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ol\xE1!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Por\xE9m, o c\xF3digo do for indica claramente que a vari\xE1vel <code>i</code> serve, em especial, para controlar a quantidade de la\xE7os executados. Quando usar o for? Quando usar o while? Depende do gosto e da ocasi\xE3o.</p><h3 id="controlando-loops" tabindex="-1"><a class="header-anchor" href="#controlando-loops" aria-hidden="true">#</a> Controlando loops</h3><p>Apesar de termos condi\xE7\xF5es booleanas nos nossos la\xE7os, em algum momento, podemos decidir parar o loop por algum motivo especial sem que o resto do la\xE7o seja executado.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">19</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Achei um n\xFAmero divis\xEDvel por 19 entre x(&quot;</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">&quot;) e y(&quot;</span><span class="token operator">+</span>y<span class="token operator">+</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O c\xF3digo acima vai percorrer os n\xFAmeros de <code>x</code> a <code>y</code> e parar quando encontrar um n\xFAmero divis\xEDvel por <code>19</code>, uma vez que foi utilizada a palavra chave <strong>break.</strong></p><p>Da mesma maneira, \xE9 poss\xEDvel obrigar o loop a executar o pr\xF3ximo la\xE7o. Para isso usamos a palavra chave <strong>continue.</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">?</p><p>O c\xF3digo acima n\xE3o vai imprimir alguns n\xFAmeros. (Quais exatamente?)</p></div><h2 id="escopos-e-blocos" tabindex="-1"><a class="header-anchor" href="#escopos-e-blocos" aria-hidden="true">#</a> Escopos e Blocos</h2><h3 id="escopo-das-variaveis" tabindex="-1"><a class="header-anchor" href="#escopo-das-variaveis" aria-hidden="true">#</a> Escopo das vari\xE1veis</h3><p>No Java, podemos declarar vari\xE1veis a qualquer momento. Por\xE9m, dependendo de onde voc\xEA as declarou, ela vai valer de um determinado ponto a outro.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// aqui a vari\xE1vel i n\xE3o existe</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// a partir daqui ela existe</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O <strong>escopo da vari\xE1vel</strong> \xE9 o nome dado ao trecho de c\xF3digo em que aquela vari\xE1vel existe e onde \xE9 poss\xEDvel acess\xE1-la.</p><p>Quando abrimos um novo bloco com as chaves, as vari\xE1veis declaradas ali dentro <strong>s\xF3 valem at\xE9 o fim daquele bloco</strong>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// aqui a vari\xE1vel i n\xE3o existe</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">// a partir daqui ela existe</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>condicao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// o i ainda vale aqui</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token comment">// o j passa a existir</span>
<span class="token punctuation">}</span>
<span class="token comment">// aqui o j n\xE3o existe mais, mas o i continua dentro do escopo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No bloco acima, a vari\xE1vel <code>j</code> para de existir quando termina o bloco onde ela foi declarada. Se voc\xEA tentar acessar uma vari\xE1vel fora de seu escopo, ocorrer\xE1 um erro de compila\xE7\xE3o.</p><p>O mesmo vale para um if:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>algumBooleano<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cuidado!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Aqui a vari\xE1vel <code>i</code> n\xE3o existe fora do <code>if</code> e do <code>else</code>! Se voc\xEA declarar a vari\xE1vel antes do <code>if</code>, vai haver outro erro de compila\xE7\xE3o: dentro do <code>if</code> e do <code>else</code> a vari\xE1vel est\xE1 sendo redeclarada! Ent\xE3o o c\xF3digo para compilar e fazer sentido fica:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>algumBooleano<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Uma situa\xE7\xE3o parecida pode ocorrer com o for:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ol\xE1!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cuidado!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Neste for, a vari\xE1vel i morre ao seu t\xE9rmino, n\xE3o podendo ser acessada de fora do for, gerando um erro de compila\xE7\xE3o. Se voc\xEA realmente quer acessar o contador depois do loop terminar, precisa de algo como:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ol\xE1!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="um-bloco-dentro-do-outro" tabindex="-1"><a class="header-anchor" href="#um-bloco-dentro-do-outro" aria-hidden="true">#</a> Um bloco dentro do outro</h3><p>Um bloco tamb\xE9m pode ser declarado dentro de outro. Isto \xE9, um <code>if</code> dentro de um <code>for</code>, ou um <code>for</code> dentro de um <code>for</code>, algo como:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condicao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// c\xF3digo</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h2><p><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><h3 id="o-problema" tabindex="-1"><a class="header-anchor" href="#o-problema" aria-hidden="true">#</a> O problema</h3><p>Dentro de um bloco, podemos declarar diversas vari\xE1veis e us\xE1-las:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> idade1<span class="token punctuation">;</span>
<span class="token keyword">int</span> idade2<span class="token punctuation">;</span>
<span class="token keyword">int</span> idade3<span class="token punctuation">;</span>
<span class="token keyword">int</span> idade4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Isso pode se tornar um problema quando precisamos mudar a quantidade de vari\xE1veis a serem declaradas de acordo com um par\xE2metro. Esse par\xE2metro pode variar, como por exemplo, a quantidade de n\xFAmero contidos num bilhete de loteria. Um jogo simples possui 6 n\xFAmeros, mas podemos comprar um bilhete mais caro, com 7 n\xFAmeros ou mais.</p><p>Para facilitar esse tipo de caso podemos declarar um <strong>vetor (array)</strong> de inteiros:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> idades <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>O que fazemos foi criar uma array de int de 10 posi\xE7\xF5es e atribuir o endere\xE7o no qual ela foi criada. Podemos ainda acessar as posi\xE7\xF5es do array:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>idades<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iqeoIt9IkHGKCbCIKrABWOmQ1GCWDWHY8o0s1c8J83O5OZCWDWTY2o2sLAW1gqL35gXyhjIy50M83Gv09jXc20q0" alt="uml diagram" loading="lazy"><figcaption>Representa\xE7\xE3o do vetor idade.</figcaption></figure><p>O c\xF3digo acima altera a sexta posi\xE7\xE3o do array. No Java, os \xEDndices do array v\xE3o de 0 a n-1, onde n \xE9 o tamanho dado no momento em que voc\xEA criou o array.</p><div class="custom-container danger"><p class="custom-container-title">Cuidado</p><p>Se voc\xEA tentar acessar uma posi\xE7\xE3o fora desse alcance, um erro ocorrer\xE1 durante a execu\xE7\xE3o.</p></div><p><sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></p><ul><li>Em Java, os arrays s\xE3o criados atrav\xE9s do comando new.</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A vari\xE1vel <code>numeros</code> armazena a refer\xEAncia de um array criado na mem\xF3ria do computador atrav\xE9s do comando <code>new</code>. Na mem\xF3ria, o espa\xE7o ocupado por esse array est\xE1 dividido em 100 &quot;peda\xE7os&quot; iguais numerados de 0 at\xE9 99. Cada &quot;peda\xE7o&quot; pode armazenar um valor do tipo int.</p><h3 id="modificando-o-conteudo-de-um-array" tabindex="-1"><a class="header-anchor" href="#modificando-o-conteudo-de-um-array" aria-hidden="true">#</a> Modificando o conte\xFAdo de um array</h3><p>Para modificar o conte\xFAdo de um array, devemos escolher uma ou mais posi\xE7\xF5es que devem ser alteradas e utilizar a sintaxe abaixo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
numeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">136</span><span class="token punctuation">;</span>
numeros<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tamb\xE9m podemos definir os valores de cada posi\xE7\xE3o de um array no momento da sua cria\xE7\xE3o utilizando as sintaxes abaixo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">100</span> <span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span> <span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="acessando-o-conteudo-de-um-array" tabindex="-1"><a class="header-anchor" href="#acessando-o-conteudo-de-um-array" aria-hidden="true">#</a> Acessando o conte\xFAdo de um array</h3><p>Para acessar o conte\xFAdo de um array, devemos escolher uma ou mais posi\xE7\xF5es e utilizar a sintaxe abaixo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">100</span> <span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numeros<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="percorrendo-um-array" tabindex="-1"><a class="header-anchor" href="#percorrendo-um-array" aria-hidden="true">#</a> Percorrendo um Array</h3><p>Quando trabalhamos com um array, uma das tarefas mais comuns \xE9 acessarmos todas ou algumas de suas posi\xE7\xF5es sistematicamente. Geralmente, fazemos isso para resgatar todos ou alguns dos valores armazenados e realizar algum processamento sobre tais informa\xE7\xF5es. Para percorrermos um array, utilizaremos a instru\xE7\xE3o de repeti\xE7\xE3o <code>for</code>. Podemos utilizar a instru\xE7\xE3o <code>while</code> tamb\xE9m. Por\xE9m, logo perceberemos que a sintaxe da instru\xE7\xE3o <code>for</code>, em geral, \xE9 mais apropriada quando estamos trabalhando com arrays.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    numeros<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para percorrer um array, \xE9 necess\xE1rio saber a quantidade de posi\xE7\xF5es do mesmo. Essa quantidade \xE9 definida quando o array \xE9 criado atrav\xE9s do comando new. Nem sempre essa informa\xE7\xE3o est\xE1 expl\xEDcita no c\xF3digo. Por exemplo, considere um m\xE9todo que imprima na sa\xEDda padr\xE3o os valores armazenados em um array. Provavelmente, esse m\xE9todo receber\xE1 como par\xE2metro um array e a quantidade de posi\xE7\xF5es desse array n\xE3o estar\xE1 expl\xEDcita no c\xF3digo fonte.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> imprimeArray <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// implementa\xE7\xE3o</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos recuperar a quantidade de posi\xE7\xF5es de um array acessando o seu atributo <code>length</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> imprimeArray <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numeros<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numeros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> foreach</h3><p>Para acessar todos os elementos de um array, \xE9 poss\xEDvel aplicar o comando for com uma sintaxe um pouco diferente.</p>`,105),b=a("div",{class:"language-java ext-java line-numbers-mode"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"void"),n(" imprimeArray "),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),n(" numeros "),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token keyword"},"for"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),n(" numero "),a("span",{class:"token operator"},":"),n(" numeros "),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token class-name"},"System"),a("span",{class:"token punctuation"},"."),n("out"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"println"),a("span",{class:"token punctuation"},"("),n("numero"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},";"),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),g=a("div",{class:"language-java ext-java line-numbers-mode"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token keyword"},"void"),n(" imprimeArray "),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),n(" numeros "),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token keyword"},"for"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),n(" i "),a("span",{class:"token operator"},"="),n(),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},";"),n(" i "),a("span",{class:"token operator"},"<"),n(" numeros"),a("span",{class:"token punctuation"},"."),n("length"),a("span",{class:"token punctuation"},";"),n(" i"),a("span",{class:"token operator"},"++"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token keyword"},"int"),n(" numero "),a("span",{class:"token operator"},"="),n(" numeros"),a("span",{class:"token punctuation"},"["),n("i"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),n(`
        `),a("span",{class:"token class-name"},"System"),a("span",{class:"token punctuation"},"."),n("out"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"println"),a("span",{class:"token punctuation"},"("),n("numero"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),h=o(`<h3 id="operacoes" tabindex="-1"><a class="header-anchor" href="#operacoes" aria-hidden="true">#</a> Opera\xE7\xF5es</h3><p>Nas bibliotecas da plataforma Java, existem m\xE9todos que realizam algumas tarefas \xFAteis relacionadas a arrays. Veremos esses m\xE9todos a seguir.</p><h4 id="ordenando-um-array" tabindex="-1"><a class="header-anchor" href="#ordenando-um-array" aria-hidden="true">#</a> Ordenando um Array</h4><p>Considere um array de String criado para armazenar nomes de pessoas. Podemos ordenar esses nomes atrav\xE9s do m\xE9todo <code>Arrays.sort()</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nomes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;rafael cosentino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jonas hirata&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;marcelo martins&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nomes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> nome <span class="token operator">:</span> nomes <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Analogamente, tamb\xE9m podemos ordenar n\xFAmeros.</p><h4 id="duplicando-um-array" tabindex="-1"><a class="header-anchor" href="#duplicando-um-array" aria-hidden="true">#</a> Duplicando um Array</h4><p>Para copiar o conte\xFAdo de um array para outro com maior capacidade, podemos utilizar o m\xE9todo <code>Arrays.copyOf()</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nomes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;rafael&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jonas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;marcelo&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nomesDuplicados <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span> nomes <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="preenchendo-um-array" tabindex="-1"><a class="header-anchor" href="#preenchendo-um-array" aria-hidden="true">#</a> Preenchendo um Array</h4><p>Podemos preencher todas as posi\xE7\xF5es de um array com um valor espec\xEDfico utilizando o m\xE9todo <code>Arrays.fill()</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numeros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>numeros<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entrada-e-saida-de-dados" tabindex="-1"><a class="header-anchor" href="#entrada-e-saida-de-dados" aria-hidden="true">#</a> Entrada e Saida de Dados</h2><p>Quando falamos em entrada e sa\xEDda, estamos nos referindo a qualquer troca de informa\xE7\xE3o entre uma aplica\xE7\xE3o e o seu exterior.</p><p>A leitura do que o usu\xE1rio digita no teclado, o conte\xFAdo obtido de um arquivo ou os dados recebidos pela rede s\xE3o exemplos de entrada de dados. A impress\xE3o de mensagens no console, a escrita de texto em um arquivo ou envio de dados pela rede s\xE3o exemplos de sa\xEDda de dados.</p><p>A plataforma Java oferece diversas classes e interfaces para facilitar o processo de entrada e sa\xEDda. Em determinadas situa\xE7\xF5es, uma aplica\xE7\xE3o precisa fazer a entrada e sa\xEDda byte a byte mas, nem sempre isso \xE9 necess\xE1rio. Sendo assim, \xE9 mais simples utilizar a classe <code>Scanner</code> do pacote <code>java.util</code> do Java. Essa classe possui m\xE9todos mais sofisticados para obter os dados de uma entrada.</p><p>Veja um exemplo de leitura do teclado com a classe Scanner:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestaDeclaracaoScanner</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//L\xEA a partir da linha de comando</span>
    <span class="token class-name">Scanner</span> teclado <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Lendo um valor inteiro:</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe um n\xFAmero para a tabuada: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//Lendo um valor real:</span>
    <span class="token keyword">float</span> preco<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe o pre\xE7o da mercadoria = R$ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    preco <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//	Lendo um valor real:</span>
    <span class="token keyword">double</span> salario<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe o sal\xE1rio do Funcion\xE1rio = R$ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    salario <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//	Lendo uma String, usado na leitura de palavras simples que n\xE3o usam o caractere de espa\xE7o (ou barra de espa\xE7o):</span>
    <span class="token class-name">String</span> s<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe uma palavra simples:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//	Lendo uma String, usado na leitura de palavras compostas, por exemplo, Pato Branco:</span>
    <span class="token class-name">String</span> s<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe uma cadeia de caracteres:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//	Na leitura consecutiva de valores num\xE9ricos e String deve-se esvaziar o buffer do teclado antes da leitura do valor String, por exemplo:</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token class-name">String</span> s<span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe um N\xFAmero Inteiro: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    teclado<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// esvazia o buffer do teclado</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Informe uma cadeia de caracteres:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    s <span class="token operator">=</span> teclado<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="joptionpane" tabindex="-1"><a class="header-anchor" href="#joptionpane" aria-hidden="true">#</a> JOptionPane</h3><p><sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></p><ul><li><p>At\xE9 agora vimos o m\xE9todo <code>System.out.println</code> para escrever informa\xE7\xF5es na tela (console).</p></li><li><p>A linguagem Java oferece diversas formas de intera\xE7\xE3o com o usu\xE1rio, a grande maioria em janelas.</p></li><li><p>Para evitar a cria\xE7\xE3o de uma interface completa, pode-se utilizar as chamadas caixas de di\xE1logo.</p></li><li><p>JOptionPane Oferece caixas de di\xE1logo predefinidas que permitem aos programas exibir mensagens aos usu\xE1rios;</p></li><li><p>exibir uma caixa de mensagem para informar o usu\xE1rio, usamos o m\xE9todo showMessageDialog(...):</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JOptionPane</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Ol\xE1 JOptionPane&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),f={href:"https://replit.com/@LeandroIFBA/JOptionPane#Main.java",target:"_blank",rel:"noopener noreferrer"},y=o(`<ul><li>H\xE1 uma outra forma de chamada para o m\xE9todo showMessageDialog, a qual permite melhorarmos o visual da caixa de mensagem:</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;Esta \xE9 uma mensagem&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Aten\xE7\xE3o&quot;</span><span class="token punctuation">,</span>  <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">WARNING_MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>JOptionPane.PLAIN_MESSAGE <ul><li>nenhum \xEDcone</li></ul></li><li>JOptionPane.ERROR_MESSAGE <ul><li>\xEDcone de erro</li></ul></li><li>JOptionPane.INFORMATION_MESSAGE <ul><li>\xEDcone de informa\xE7\xE3o</li></ul></li><li>JOptionPane.WARNING_MESSAGE <ul><li>\xEDcone de aviso</li></ul></li><li>JOptionPane.QUESTION_MESSAGE <ul><li>\xEDcone de interroga\xE7\xE3o</li></ul></li></ul><h4 id="system-exit" tabindex="-1"><a class="header-anchor" href="#system-exit" aria-hidden="true">#</a> System.exit</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//...</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>System.exit(0) \xE9 necess\xE1rio em programas com interface gr\xE1fica, terminando o aplicativo Java.</li><li>O retorno Zero(&#39;0&#39;) para o m\xE9todo exit() indica que o programa finalizou com sucesso.</li><li>Valores diferentes de zero significam erros na execu\xE7\xE3o e podem ser tratados por aplicativos que chamaram o programa Java.</li></ul><h3 id="showinputdialog" tabindex="-1"><a class="header-anchor" href="#showinputdialog" aria-hidden="true">#</a> showInputDialog</h3><ul><li>Exibir uma caixa de entrada</li><li>Retorna sempre a String digitada pelo usu\xE1rio.</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> nome<span class="token punctuation">;</span>
nome <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token string">&quot;Digite o seu nome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;Seu nome \xE9 &quot;</span><span class="token operator">+</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Varia\xE7\xE3o mais completa:</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>nome <span class="token operator">=</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Por favor, digite o seu nome&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Aten\xE7\xE3o&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token constant">INFORMATION_MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="conversoes-em-java" tabindex="-1"><a class="header-anchor" href="#conversoes-em-java" aria-hidden="true">#</a> Convers\xF5es em Java</h2><p><sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup></p><h3 id="convertendo-ascii-para-string" tabindex="-1"><a class="header-anchor" href="#convertendo-ascii-para-string" aria-hidden="true">#</a> Convertendo ASCII para String</h3><p>Voc\xEA pode converter c\xF3digos ASCII para String utilizando o m\xE9todo <code>toString()</code>, de acordo com o c\xF3digo abaixo:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> aChar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-numeros-em-decimal-para-binario" tabindex="-1"><a class="header-anchor" href="#convertendo-numeros-em-decimal-para-binario" aria-hidden="true">#</a> Convertendo n\xFAmeros em decimal para bin\xE1rio</h3><p>\xC9 poss\xEDvel fazer a convers\xE3o de n\xFAmeros na base hexadecimal para bin\xE1rio atrav\xE9s do m\xE9todo <code>toBinaryString()</code>, como pode ser visto a seguir:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> binstr <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-um-double-para-um-string" tabindex="-1"><a class="header-anchor" href="#convertendo-um-double-para-um-string" aria-hidden="true">#</a> Convertendo um Double para um String</h3><p>Voc\xEA pode converter um vari\xE1vel do tipo <code>double</code> para um <code>String</code> usando o m\xE9todo <code>toString()</code> da classe <code>Double</code>, como apresentado a seguir:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">double</span> i <span class="token operator">=</span> <span class="token number">42.0</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-um-float-para-um-string" tabindex="-1"><a class="header-anchor" href="#convertendo-um-float-para-um-string" aria-hidden="true">#</a> Convertendo um float para um String</h3><p>Da mesma forma que a convers\xE3o do <code>Double</code>, voc\xEA utiliza o m\xE9todo <code>toString()</code> da classe <code>Float</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">12.0f</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-um-integer-para-codigo-ascii" tabindex="-1"><a class="header-anchor" href="#convertendo-um-integer-para-codigo-ascii" aria-hidden="true">#</a> Convertendo um integer para c\xF3digo ASCII</h3><p>Veja como fazer a convers\xE3o de um integer para ASCII:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span> <span class="token comment">// Voc\xEA ter\xE1 o valor 65</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-de-um-integer-para-uma-string" tabindex="-1"><a class="header-anchor" href="#convertendo-de-um-integer-para-uma-string" aria-hidden="true">#</a> Convertendo de um integer para uma String</h3><p>Veja no c\xF3digo abaixo duas formas de fazer a convers\xE3o de um <code>integer</code> para uma <code>String</code>:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//ou</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> i <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-de-um-long-para-uma-string" tabindex="-1"><a class="header-anchor" href="#convertendo-de-um-long-para-uma-string" aria-hidden="true">#</a> Convertendo de um long para uma String</h3><p>Voc\xEA pode fazer a convers\xE3o de <code>long</code> para <code>String</code> atrav\xE9s do m\xE9todo <code>toString</code> da classe <code>Long</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-de-uma-string-para-double" tabindex="-1"><a class="header-anchor" href="#convertendo-de-uma-string-para-double" aria-hidden="true">#</a> Convertendo de uma String para Double</h3><p>Voc\xEA pode converter um <code>String</code> para <code>double</code> utilizando o m\xE9todo <code>valueOf()</code> e <code>doubleValue()</code> da classe <code>Double</code>, como mostrado no trecho abaixo.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="convertendo-string-para-integer" tabindex="-1"><a class="header-anchor" href="#convertendo-string-para-integer" aria-hidden="true">#</a> Convertendo String para integer</h3><p>Fa\xE7a a convers\xE3o de um <code>String</code> para integer usando o m\xE9todo <code>parseInt()</code> da classe <code>Integer</code>, ou usando os m\xE9todos <code>valueOf()</code> e <code>intValue()</code> da classe <code>Integer</code> combinados, como mostra o c\xF3digo a seguir.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>str <span class="token operator">=</span> <span class="token string">&quot;25&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//ou</span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convertendo-uma-string-para-um-float" tabindex="-1"><a class="header-anchor" href="#convertendo-uma-string-para-um-float" aria-hidden="true">#</a> Convertendo uma String para um float</h3><p>Converta um String para float atrav\xE9s da combina\xE7\xE3o dos m\xE9todos <code>valueOf()</code> e <code>floatValue()</code> da classe <code>Float</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="convertendo-uma-string-para-um-long" tabindex="-1"><a class="header-anchor" href="#convertendo-uma-string-para-um-long" aria-hidden="true">#</a> Convertendo uma String para um long</h3><p>Voc\xEA pode fazer a convers\xE3o de um String para long usando o m\xE9todo parseLong() da classe Long, ou utilizando a combina\xE7\xE3o dos m\xE9todos <code>valueOf()</code> e <code>longValue()</code> tamb\xE9m da classe <code>Long</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//ou</span>
<span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="enum" tabindex="-1"><a class="header-anchor" href="#enum" aria-hidden="true">#</a> Enum</h2><p><sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup></p><p>Um Java Enum \xE9 um tipo especial do Java usado para definir cole\xE7\xF5es de constantes. Mais precisamente, um tipo de enum Java \xE9 um tipo especial de classe Java. Um enum pode conter constantes, m\xE9todos, etc. Enums Java foram adicionados no Java 5.</p><h3 id="exemplo-enum" tabindex="-1"><a class="header-anchor" href="#exemplo-enum" aria-hidden="true">#</a> Exemplo Enum</h3><p>Aqui est\xE1 um exemplo simples de enum Java:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Level</span> <span class="token punctuation">{</span>
    <span class="token constant">HIGH</span><span class="token punctuation">,</span>
    <span class="token constant">MEDIUM</span><span class="token punctuation">,</span>
    <span class="token constant">LOW</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Observe a palavra <code>enum</code> \xE9 usada no lugar de <code>class</code> ou <code>interface</code>. A palavra-chave enum em Java sinaliza ao compilador Java que essa defini\xE7\xE3o de tipo \xE9 um enum.</p><p>Voc\xEA pode se referir \xE0s constantes no enum acima assim:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Level</span> level <span class="token operator">=</span> <span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">HIGH</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Observe como a vari\xE1vel level \xE9 do tipo Level que \xE9 o tipo enum Java definido no exemplo acima. A vari\xE1vel level pode tomar uma das Level constantes enum como valor ( HIGH, MEDIUM ou LOW). Nesse caso, level \xE9 definido como HIGH.</p>`,56),w={href:"https://www.devmedia.com.br/tipos-enum-no-java/25729",target:"_blank",rel:"noopener noreferrer"},j=o(`<h2 id="pilha-de-execucao" tabindex="-1"><a class="header-anchor" href="#pilha-de-execucao" aria-hidden="true">#</a> Pilha de Execu\xE7\xE3o</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TestePilha</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;inicio do main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">metodo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fim do main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">metodo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;inicio do metodo1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">metodo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fim do metodo1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">metodo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;inicio do metodo2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fim do metodo2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>O m\xE9todo <code>main</code> chama <code>metodo1</code></li><li>O m\xE9todo <code>metodo1</code> chama o <code>metodo2</code></li></ul><p>Cada um desses m\xE9todos pode ter suas pr\xF3prias vari\xE1veis locais, sendo que, por exemplo, o <code>metodo1</code> n\xE3o enxerga as vari\xE1veis declaradas dentro do <code>main</code></p><p>Toda invoca\xE7\xE3o de m\xE9todo \xE9 empilhada em uma estrutura de dados que isola a \xE1rea de mem\xF3ria de cada um. Quando um m\xE9todo termina (retorna), ele volta para o m\xE9todo que o invocou. Ele descobre isso atrav\xE9s da pilha de execu\xE7\xE3o <strong>(stack)</strong></p><figure><img src="https://www.plantuml.com/plantuml/svg/ROyn2iCm34Ltdq9aQeSCzW6AZz2zT12nQ8mjsTZkL7Bt9Z6Kj5JBb_xx4iZMXgKzEIhxwMhmah4WWoH7bJBeWrTGGlSAJGtb4Gc6guypdjOBKpWFW1NoIy5QXmXJIowPdRBvJtMd-fTk8wENJNj4BOeDZBVPEqTo7o_R5kjlHraIj__MzGq0" alt="uml diagram" loading="lazy"><figcaption>Representa\xE7\xE3o de uma pilha de execu\xE7\xE3o.</figcaption></figure><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Refer\xEAncias</h2><hr class="footnotes-sep">`,8),x={class:"footnotes"},q={class:"footnotes-list"},S={id:"footnote1",class:"footnote-item"},_={href:"https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html",target:"_blank",rel:"noopener noreferrer"},O=a("a",{href:"#footnote-ref1",class:"footnote-backref"},"\u21A9\uFE0E",-1),A=a("li",{id:"footnote2",class:"footnote-item"},[a("p",null,[n("Caelum. Java e Orienta\xE7\xE3o a Objetos - Curso fj-11. "),a("a",{href:"#footnote-ref2",class:"footnote-backref"},"\u21A9\uFE0E")])],-1),z=a("li",{id:"footnote3",class:"footnote-item"},[a("p",null,[n("K19-Treinamentos. (2013). Orienta\xE7\xE3o a Objetos em Java, 220. "),a("a",{href:"#footnote-ref3",class:"footnote-backref"},"\u21A9\uFE0E")])],-1),P={id:"footnote4",class:"footnote-item"},I={href:"http://www.facom.ufu.br/~bacala/POO/",target:"_blank",rel:"noopener noreferrer"},J=a("a",{href:"#footnote-ref4",class:"footnote-backref"},"\u21A9\uFE0E",-1),E={id:"footnote5",class:"footnote-item"},D={href:"https://www.devmedia.com.br/conversoes-em-java/2695",target:"_blank",rel:"noopener noreferrer"},C=a("a",{href:"#footnote-ref5",class:"footnote-backref"},"\u21A9\uFE0E",-1),V={id:"footnote6",class:"footnote-item"},M={href:"http://tutorials.jenkov.com/",target:"_blank",rel:"noopener noreferrer"},N=a("a",{href:"#footnote-ref6",class:"footnote-backref"},"\u21A9\uFE0E",-1);function L(G,B){const c=p("code-block"),i=p("code-group"),e=p("ExternalLinkIcon");return u(),r("div",null,[m,k,v,s(i,null,{default:t(()=>[s(c,{title:"Foreach"},{default:t(()=>[b]),_:1}),s(c,{title:"Equivalente"},{default:t(()=>[g]),_:1})]),_:1}),h,a("p",null,[a("a",f,[n("Veja Rodando"),s(e)])]),y,a("p",null,[a("a",w,[n("https://www.devmedia.com.br/tipos-enum-no-java/25729"),s(e)])]),j,a("section",x,[a("ol",q,[a("li",S,[a("p",null,[n("Oracle. Code Conventions for the Java Programming Language: 9. Naming Conventions "),a("a",_,[n("https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html"),s(e)]),n(" (Acessado em 17/07/2021) "),O])]),A,z,a("li",P,[a("p",null,[n("Bacal\xE1, S\xEDlvio. P\xE1gina do Professor S\xEDlvio Bacal\xE1 J\xFAnior. "),a("a",I,[n("http://www.facom.ufu.br/~bacala/POO/"),s(e)]),n(),J])]),a("li",E,[a("p",null,[n("Convers\xF5es em Java "),a("a",D,[n("https://www.devmedia.com.br/conversoes-em-java/2695"),s(e)]),n(". (Acessado em 05/10/2022) "),C])]),a("li",V,[a("p",null,[n("Jakob Jenkov. Tutorials for Software Developers and Technopreneurs! "),a("a",M,[n("http://tutorials.jenkov.com/"),s(e)]),n(". (Acessado em 03/11/2021) "),N])])])])])}const W=l(d,[["render",L],["__file","02_Codificando_JAVA.html.vue"]]);export{W as default};
